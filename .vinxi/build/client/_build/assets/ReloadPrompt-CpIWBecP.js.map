{"version":3,"mappings":"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","names":["registerSW","options","immediate","onNeedRefresh","onOfflineReady","onRegistered","onRegisteredSW","onRegisterError","wb","registerPromise","sendSkipWaitingMessage","updateServiceWorker","_reloadPage","register","Workbox","__vitePreload","onNeedRefreshCalled","showSkipWaitingPrompt","event","r","useRegisterSW","needRefresh","setNeedRefresh","createSignal","offlineReady","setOfflineReady","ReloadPrompt","swUrl","log","console","dir","error","trace","close","_el$","_$getNextElement","_tmpl$4","_$createComponent","Show","when","children","_el$2","_tmpl$3","_el$3","firstChild","_el$7","nextSibling","_el$8","_co$","_$getNextMarker","_el$6","fallback","_tmpl$5","_tmpl$","_el$5","_tmpl$2","$$click","_$effect","_$className","styles","ToastButton","_$runHydrationEvents","_p$","_v$","Toast","_v$2","Message","_v$3","e","t","a","undefined","Container","_$delegateEvents"],"ignoreList":[],"sources":["../../../../../../../../../@vite-plugin-pwa/virtual:pwa-register/solid","../../../../../src/components/ReloadPrompt.tsx"],"sourcesContent":["// src/client/build/solid.ts\nimport { createSignal } from \"solid-js\";\n\n// src/client/build/register.ts\nvar autoUpdateMode = \"false\";\nvar selfDestroying = \"false\";\nvar auto = autoUpdateMode === \"true\";\nvar autoDestroy = selfDestroying === \"true\";\nfunction registerSW(options = {}) {\n  const {\n    immediate = false,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  let wb;\n  let registerPromise;\n  let sendSkipWaitingMessage;\n  const updateServiceWorker = async (_reloadPage = true) => {\n    await registerPromise;\n    if (!auto) {\n      await sendSkipWaitingMessage?.();\n    }\n  };\n  async function register() {\n    if (\"serviceWorker\" in navigator) {\n      const { Workbox } = await import(\"workbox-window\");\n      wb = new Workbox(\"/claims-sw.js\", { scope: \"/\", type: \"classic\" });\n      sendSkipWaitingMessage = async () => {\n        await wb?.messageSkipWaiting();\n      };\n      if (!autoDestroy) {\n        if (auto) {\n          wb.addEventListener(\"activated\", (event) => {\n            if (event.isUpdate || event.isExternal)\n              window.location.reload();\n          });\n          wb.addEventListener(\"installed\", (event) => {\n            if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n        } else {\n          let onNeedRefreshCalled = false;\n          const showSkipWaitingPrompt = () => {\n            onNeedRefreshCalled = true;\n            wb?.addEventListener(\"controlling\", (event) => {\n              if (event.isUpdate)\n                window.location.reload();\n            });\n            onNeedRefresh?.();\n          };\n          wb.addEventListener(\"installed\", (event) => {\n            if (typeof event.isUpdate === \"undefined\") {\n              if (typeof event.isExternal !== \"undefined\") {\n                if (event.isExternal)\n                  showSkipWaitingPrompt();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              } else {\n                if (event.isExternal)\n                  window.location.reload();\n                else\n                  !onNeedRefreshCalled && onOfflineReady?.();\n              }\n            } else if (!event.isUpdate) {\n              onOfflineReady?.();\n            }\n          });\n          wb.addEventListener(\"waiting\", showSkipWaitingPrompt);\n          wb.addEventListener(\"externalwaiting\", showSkipWaitingPrompt);\n        }\n      }\n      wb.register({ immediate }).then((r) => {\n        if (onRegisteredSW)\n          onRegisteredSW(\"/claims-sw.js\", r);\n        else\n          onRegistered?.(r);\n      }).catch((e) => {\n        onRegisterError?.(e);\n      });\n    }\n  }\n  registerPromise = register();\n  return updateServiceWorker;\n}\n\n// src/client/build/solid.ts\nfunction useRegisterSW(options = {}) {\n  const {\n    immediate = true,\n    onNeedRefresh,\n    onOfflineReady,\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  } = options;\n  const [needRefresh, setNeedRefresh] = createSignal(false);\n  const [offlineReady, setOfflineReady] = createSignal(false);\n  const updateServiceWorker = registerSW({\n    immediate,\n    onOfflineReady() {\n      setOfflineReady(true);\n      onOfflineReady?.();\n    },\n    onNeedRefresh() {\n      setNeedRefresh(true);\n      onNeedRefresh?.();\n    },\n    onRegistered,\n    onRegisteredSW,\n    onRegisterError\n  });\n  return {\n    needRefresh: [needRefresh, setNeedRefresh],\n    offlineReady: [offlineReady, setOfflineReady],\n    updateServiceWorker\n  };\n}\nexport {\n  useRegisterSW\n};\n","/// <reference types=\"vite-plugin-pwa/info\" />\nimport type { Component } from \"solid-js\";\nimport { Show } from \"solid-js\";\nimport { useRegisterSW } from \"virtual:pwa-register/solid\";\n// import { pwaInfo } from 'virtual:pwa-info'\nimport styles from \"./ReloadPrompt.module.css\";\n\n// eslint-disable-next-line no-console\n// console.log(pwaInfo)\n\nconst ReloadPrompt: Component = () => {\n  // replaced dynamically\n  const reloadSW = \"__RELOAD_SW__\";\n  const {\n    needRefresh: [needRefresh, setNeedRefresh],\n    offlineReady: [offlineReady, setOfflineReady],\n    updateServiceWorker,\n  } = useRegisterSW({\n    immediate: true,\n    onRegisteredSW(swUrl, r) {\n      // eslint-disable-next-line no-console\n      console.log(`Service Worker at: ${swUrl}`);\n      // @ts-expect-error just ignore\n      if (reloadSW === \"true\") {\n        r &&\n          setInterval(() => {\n            // eslint-disable-next-line no-console\n            console.log(\"Checking for sw update\");\n            r.update();\n          }, 20000 /* 20s for testing purposes */);\n      } else {\n        // eslint-disable-next-line no-console\n        console.dir(r);\n      }\n    },\n    onRegisterError(error) {\n      console.trace(\"SW registration error\", error);\n    },\n  });\n\n  const close = () => {\n    setOfflineReady(false);\n    setNeedRefresh(false);\n  };\n\n  return (\n    <div class={styles.Container}>\n      <Show when={offlineReady() || needRefresh()}>\n        <div class={styles.Toast}>\n          <div class={styles.Message}>\n            <Show\n              fallback={\n                <span>\n                  New content available, click on reload button to update.\n                </span>\n              }\n              when={offlineReady()}\n            >\n              <span>App ready to work offline</span>\n            </Show>\n          </div>\n          <Show when={needRefresh()}>\n            <button\n              class={styles.ToastButton}\n              onClick={() => updateServiceWorker(true)}\n            >\n              Reload\n            </button>\n          </Show>\n          <button class={styles.ToastButton} onClick={() => close()}>\n            Close\n          </button>\n        </div>\n      </Show>\n    </div>\n  );\n};\n\nexport default ReloadPrompt;\n"],"file":"assets/ReloadPrompt-CpIWBecP.js"}