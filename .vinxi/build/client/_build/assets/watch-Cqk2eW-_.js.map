{"version":3,"file":"watch-Cqk2eW-_.js","sources":["../../../../../src/utils/hls.ts","../../../../../src/components/RelatedVideos.tsx","../../../../../src/components/Bottomsheet.tsx","../../../../../src/components/Comment.tsx","../../../../../src/components/Comments.tsx","../../../../../src/routes/watch.tsx?pick=default&pick=$css"],"sourcesContent":["import { PipedVideo, Subtitle } from \"~/types\";\nimport { ttml2srt } from \"../lib/ttml.js\";\n\n/**\n * Modify an HLS (HTTP Live Streaming) manifest to isolate a specific bandwidth and its corresponding audio and video URLs.\n *\n * @param manifest {string} - The original HLS manifest.\n * @param bandwidth {string} - The target bandwidth for filtering streams.\n *\n * @returns {Object} An object containing the updated manifest, selected audio URL, and selected video URL.\n * - updatedManifest {string} - The modified HLS manifest.\n * - selectedAudioUrl {string|null} - The selected audio URL, or null if not found.\n * - selectedVideoUrl {string|null} - The selected video URL, or null if not found.\n *\n * @throws Will throw an error if the manifest does not start with \"#EXTM3U\".\n */\nexport function modifyManifest(\n  manifest: string,\n  bandwidth: string\n): {\n  updatedManifest: string;\n  selectedAudioUrl: string | null;\n  selectedVideoUrl: string | null;\n} {\n  if (!manifest.startsWith(\"#EXTM3U\")) {\n    throw new Error(\"Not a valid manifest file\");\n  }\n  const lines = manifest.split(\"\\n\");\n\n  let selectedAudioChannel: string | null = null;\n  let selectedAudioUrl: string | null = null;\n  let selectedVideoUrl: string | null = null;\n  let output: string[] = [];\n\n  // get the audio channel\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (\n      line.startsWith(\"#EXT-X-STREAM-INF\") &&\n      line.includes(`BANDWIDTH=${bandwidth}`)\n    ) {\n      const audioMatch = line.match(/AUDIO=\"(\\d+)\"/);\n      if (audioMatch) {\n        selectedAudioChannel = audioMatch[1];\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.startsWith(\"#EXT-X-STREAM-INF\")) {\n      // check if this line contains the chosen bandwidth\n      if (line.includes(`BANDWIDTH=${bandwidth}`)) {\n        // add the line to the output\n        output.push(line);\n\n        if (i + 1 < lines.length) {\n          selectedVideoUrl = lines[i + 1];\n          output.push(\"{video}\");\n          i++; // skip the next line as we've replaced it\n        }\n      } else {\n        i++; // skip the next url as it's irrelevant\n      }\n    } else if (line.startsWith(\"#EXT-X-MEDIA\")) {\n      const uriMatch = line.match(/URI=\"([^\"]+)\"/);\n      if (selectedAudioChannel !== null) {\n        // check if this line contains the chosen audio channel\n        if (line.includes(`GROUP-ID=\"${selectedAudioChannel}\"`)) {\n          // store the audio url and replace the uri with \"{audio}\"\n          if (uriMatch) {\n            selectedAudioUrl = uriMatch[1];\n          }\n          const replacedLine = line.replace(/URI=\"[^\"]+\"/, 'URI=\"{audio}\"');\n          output.push(replacedLine);\n        }\n      }\n    } else {\n      // keep all other relevant lines\n      output.push(line);\n    }\n  }\n\n  const result = {\n    updatedManifest: output.join(\"\\n\"),\n    selectedAudioUrl: selectedAudioUrl,\n    selectedVideoUrl: selectedVideoUrl,\n  };\n\n  return result;\n}\n\n/**\n * Modify a VOD (Video-On-Demand) HLS manifest to isolate segment information and metadata.\n *\n * @param manifest {string} - The original HLS VOD manifest.\n *\n * @returns {Object} An object containing the updated manifest, map, and list of segments.\n * - modifiedManifest {string} - The modified HLS VOD manifest.\n * - map {string} - The URL of the map (Initialization segment), or an empty string if not found.\n * - segments {string[]} - An array containing the URLs of the video segments.\n */\nexport function modifyManifestVOD(manifest: string): {\n  modifiedManifest: string;\n  map: string;\n  segments: string[];\n} {\n  // Split the manifest by lines\n  const lines = manifest.split(\"\\n\");\n\n  let output: string[] = [];\n  let map: string = \"\";\n  let segments: string[] = [];\n\n  // Process each line\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (line.startsWith(\"#EXT-X-MAP\")) {\n      i++;\n      // Extract map URI\n      // const mapMatch = line.match(/URI=\"([^\"]+)\"/);\n      // if (mapMatch) {\n      //   map = mapMatch[1];\n      // }\n      // // Replace the URI with \"{map}\"\n      // const replacedLine = line.replace(/URI=\"[^\"]+\"/, 'URI=\"{map}\"');\n      // output.push(replacedLine);\n    } else if (line.startsWith(\"#EXTINF\")) {\n      // Add the #EXTINF line to the output\n      output.push(line);\n      if (i + 1 < lines.length) {\n        segments.push(lines[i + 1]); // Add the URL to segments\n        output.push(\"{segment}\");\n        i++; // Skip the next line as we've replaced it\n      }\n    } else {\n      // Keep lines that aren't map or #EXTINF info\n      output.push(line);\n    }\n  }\n\n  return {\n    modifiedManifest: output.join(\"\\n\"),\n    map: map,\n    segments: segments,\n  };\n}\n\n/**\n * Fetch and save video segments to a local directory.\n *\n * @param {string} instance - The base URL where the segments are located.\n * @param {string} dirName - The directory name where the segments will be saved.\n * @param {string[]} segments - An array containing the segment URLs.\n * @param {number} [maxRetries=3] - The maximum number of retries to fetch a segment.\n *\n * @returns {Promise<string[]>} A Promise resolving to an array of local segment names.\n *\n * @throws Will throw an error if the directory handle is not obtained.\n */\n\nconst filterVideoInfo = (videoData: PipedVideo) => {\n  return {\n    title: videoData.title,\n    description: videoData.description,\n    uploadDate: videoData.uploadDate,\n    uploader: videoData.uploader,\n    uploaderUrl: videoData.uploaderUrl,\n    category: videoData.category,\n    license: videoData.license,\n    visibility: videoData.visibility,\n    tags: videoData.tags,\n    duration: videoData.duration,\n    uploaderVerified: videoData.uploaderVerified,\n    views: videoData.views,\n    likes: videoData.likes,\n    dislikes: videoData.dislikes,\n    uploaderSubscriberCount: videoData.uploaderSubscriberCount,\n    chapters: videoData.chapters,\n    subtitles: videoData.subtitles.map((sub) => sub.code),\n    previewFrames: videoData.previewFrames,\n  };\n};\n\nasync function fetchVideoData(\n  videoId: string,\n  apiUrl: string\n): Promise<PipedVideo> {\n  const response = await fetch(`${apiUrl}/streams/${videoId}`);\n  const videoData = (await response.json()) as PipedVideo;\n  if (!videoData || (videoData as any).error) {\n    throw new Error(\n      `Failed to fetch video data for ${videoId}: ${response.status} ${response.statusText}`\n    );\n  }\n  return videoData;\n}\ninterface SaveParams<T> {\n  data: T;\n  handle: FileSystemFileHandle;\n}\n\nasync function saveAsset<T>({ data, handle }: SaveParams<T>): Promise<void> {\n  const writableStream = await (handle as any).createWritable();\n  await writableStream.write(data);\n  await writableStream.close();\n}\n\nexport async function retry<T>(\n  fn: () => Promise<T>,\n  maxRetries: number\n): Promise<T> {\n  let retries = 0;\n  while (true) {\n    try {\n      return await fn();\n    } catch (error) {\n      if (retries >= maxRetries) {\n        throw new Error(`Failed after ${maxRetries} retries.`);\n      }\n      retries++;\n    }\n  }\n}\n\nexport async function fetchSegments(\n  instance: string,\n  segments: string[],\n  maxRetries: number = 3\n): Promise<Blob[]> {\n  const localSegments: Blob[] = [];\n\n  outer: for (let i = 0; i < segments.length; i++) {\n    try {\n      const segmentData = await fetchAssetData(\n        async (url) =>\n          await retry(async () => await fetchBlob(url), maxRetries),\n        { url: `${instance}${segments[i]}` }\n      );\n      if (!segmentData) {\n        throw new Error(\"Failed to fetch segment data.\");\n      }\n      localSegments.push(segmentData);\n    } catch (error) {\n      console.error(`Error fetching or saving segment ${i}:`, error);\n      break outer;\n    }\n  }\n  if (localSegments.length !== segments.length) {\n    throw new Error(\"Failed to fetch all segments.\");\n  }\n\n  return localSegments;\n}\n\ntype Fetcher<T> = (url: string) => Promise<T>;\n\nexport async function fetchAssetData<T>(\n  fetcher: Fetcher<T>,\n  { url }: { url: string }\n): Promise<T> {\n  const data = await fetcher(url);\n  return data;\n}\n\nexport const fetchText = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch ${url}: ${response.status} ${response.statusText}`\n    );\n  }\n  return await response.text();\n};\n\nexport const fetchBlob = async (url: string) => {\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch ${url}: ${response.status} ${response.statusText}`\n    );\n  }\n  return await response.blob();\n};\n\n/* Download a video including its metadata, segments, and other assets.\n *\n * @param {string} videoId - The ID of the video to be downloaded.\n * @param {string} [apiUrl=\"https://pipedapi.kavin.rocks\"] - The API endpoint to fetch video details.\n *\n * @throws Will throw an error if downloading the video fails at any stage.\n */\nexport async function downloadVideo(\n  videoId: string,\n  apiUrl: string = \"https://pipedapi.kavin.rocks\",\n  resolution: string = \"1080\",\n  subtitleCode?: string\n) {\n  try {\n    console.log(\"Fetching video data...\");\n\n    const videoData = await fetchVideoData(videoId, apiUrl);\n    console.log(\"Video data fetched.\", videoData);\n\n    console.log(\"Getting directory handle...\");\n    const root = await navigator.storage.getDirectory();\n    const videoDir = await root.getDirectoryHandle(videoId, {\n      create: true,\n    });\n    const streamsHandle = await videoDir.getFileHandle(\"streams.json\", {\n      create: true,\n    });\n\n    const filteredVideoInfo = filterVideoInfo(videoData);\n    console.log(\"Filtered video info:\", filteredVideoInfo);\n\n    console.log(\"Saving video info...\");\n    await saveAsset({\n      data: JSON.stringify(filteredVideoInfo),\n      handle: streamsHandle,\n    });\n    console.log(\"Video info saved.\");\n\n    const baseProxyUrl = videoData.hls.split(\"/api\")[0];\n\n    console.log(\"Fetching manifest...\");\n    const initialManifest = await fetchAssetData(\n      async (url) => {\n        return retry(async () => {\n          return await fetchText(url);\n        }, 3);\n      },\n      {\n        url: videoData.hls,\n      }\n    );\n    console.log(\"Manifest fetched.\", initialManifest);\n    if (!initialManifest || !initialManifest.includes(\"#EXTM3U\")) {\n      throw new Error(\"Failed to fetch manifest.\");\n    }\n\n    const findBandwithByResolution = (resolution: string, manifest: string) => {\n      const lines = manifest.split(\"\\n\");\n      const line = lines.find((line) => line.includes(resolution));\n      if (!line) throw new Error(`Could not find resolution ${resolution}`);\n      const bw = line.split(\"BANDWIDTH=\")?.[1]?.match(/([0-9])*/g)?.[0];\n      if (!bw)\n        throw new Error(\n          `Could not find the matching bandwidth for ${resolution}`\n        );\n      return bw;\n    };\n\n    const videoBandwidth = findBandwithByResolution(\n      resolution,\n      initialManifest\n    );\n    console.log(\"Video bandwidth:\", videoBandwidth);\n\n    const manifestResults = modifyManifest(initialManifest, videoBandwidth);\n\n    console.log(\"Modified manifest:\", manifestResults);\n    if (\n      !manifestResults ||\n      !manifestResults.updatedManifest ||\n      !manifestResults.updatedManifest.includes(\"#EXTM3U\")\n    ) {\n      throw new Error(\"Failed to modify manifest.\");\n    }\n\n    const manifestIndexHandle = await videoDir.getFileHandle(\"index.m3u8\", {\n      create: true,\n    });\n\n    console.log(\"Saving manifest...\");\n    saveAsset({\n      data: manifestResults.updatedManifest,\n      handle: manifestIndexHandle,\n    });\n    console.log(\"Manifest saved.\");\n\n    if (!manifestResults.selectedVideoUrl) {\n      throw new Error(\"Failed to find a matching video URL.\");\n    }\n    if (!manifestResults.selectedAudioUrl) {\n      throw new Error(\"Failed to find a matching audio URL.\");\n    }\n\n    console.log(\"Fetching audio manifest...\");\n    const audioManifestContent = await fetchAssetData(\n      async (url) => {\n        return retry(async () => {\n          return await fetchText(url);\n        }, 3);\n      },\n      {\n        url: `${baseProxyUrl}${manifestResults.selectedAudioUrl}`,\n      }\n    );\n    console.log(\"Audio manifest fetched.\", audioManifestContent);\n\n    console.log(\"Fetching video manifest...\");\n    const videoManifestContent = await fetchAssetData(\n      async (url) => {\n        return retry(async () => {\n          return await fetchText(url);\n        }, 3);\n      },\n      {\n        url: `${baseProxyUrl}${manifestResults.selectedVideoUrl}`,\n      }\n    );\n    console.log(\"Video manifest fetched.\", videoManifestContent);\n\n    const modifiedAudioManifest = modifyManifestVOD(audioManifestContent);\n    const modifiedVideoManifest = modifyManifestVOD(videoManifestContent);\n\n    console.log(\"Saving audio manifest...\");\n    const audioSegmentsDir = await videoDir.getDirectoryHandle(`audio`, {\n      create: true,\n    });\n    const audioFile = await audioSegmentsDir.getFileHandle(\"audio.m3u8\", {\n      create: true,\n    });\n    saveAsset({\n      data: modifiedAudioManifest.modifiedManifest,\n      handle: audioFile,\n    });\n    console.log(\"Audio manifest saved.\");\n\n    console.log(\"Saving video manifest...\");\n    const videoSegmentsDir = await videoDir.getDirectoryHandle(`video`, {\n      create: true,\n    });\n    const videoFile = await videoSegmentsDir.getFileHandle(\"video.m3u8\", {\n      create: true,\n    });\n    saveAsset({\n      data: modifiedVideoManifest.modifiedManifest,\n      handle: videoFile,\n    });\n    console.log(\"Video manifest saved.\");\n\n    console.log(\"Fetching audio segments...\");\n    const audioSegments = await fetchSegments(\n      baseProxyUrl,\n      modifiedAudioManifest.segments,\n      3\n    );\n    console.log(\"Audio segments fetched.\", audioSegments);\n\n    console.log(\"Saving audio segments...\");\n    for (let i = 0; i < audioSegments.length; i++) {\n      const segmentName = `segment-${i}.ts`;\n      const segmentHandle = await audioSegmentsDir.getFileHandle(segmentName, {\n        create: true,\n      });\n      saveAsset({\n        data: audioSegments[i],\n        handle: segmentHandle,\n      });\n    }\n    console.log(\"Audio segments saved.\");\n\n    console.log(\"Fetching video segments...\");\n    const videoSegments = await fetchSegments(\n      baseProxyUrl,\n      modifiedVideoManifest.segments,\n      3\n    );\n    console.log(\"Video segments fetched.\", videoSegments);\n\n    console.log(\"Saving video segments...\");\n    for (let i = 0; i < videoSegments.length; i++) {\n      const segmentName = `segment-${i}.ts`;\n      const segmentHandle = await videoSegmentsDir.getFileHandle(segmentName, {\n        create: true,\n      });\n      saveAsset({\n        data: videoSegments[i],\n        handle: segmentHandle,\n      });\n    }\n    console.log(\"Video segments saved.\");\n\n    if (subtitleCode) {\n      if (videoData.subtitles.length > 0) {\n        console.log(\"Fetching subtitles...\");\n        const subtitle = videoData.subtitles.find(\n          (subtitle) => subtitle.code === subtitleCode\n        );\n        console.log(\"Subtitle fetched.\", subtitle);\n        if (subtitle) {\n          console.log(\"Converting subtitles...\");\n          const subs = await ttml2srt(subtitle.url, null);\n          console.log(\"Subtitles converted.\", subs);\n          console.log(\"Saving subtitles...\");\n          const subtitleHandle = await videoDir.getFileHandle(\n            `${subtitle.code}.srt`,\n            { create: true }\n          );\n          saveAsset({\n            data: subs,\n            handle: subtitleHandle,\n          });\n          console.log(\"Subtitles saved.\");\n        }\n      }\n    }\n    console.log(\"Fetching thumbnail...\");\n    const thumbnail = await fetchAssetData(\n      (url) => {\n        return retry(async () => {\n          return await fetchBlob(url);\n        }, 3);\n      },\n      {\n        url: videoData.thumbnailUrl,\n      }\n    );\n    console.log(\"Thumbnail fetched.\", thumbnail);\n    console.log(\"Saving thumbnail...\");\n    const thumbnailHandle = await videoDir.getFileHandle(\"thumbnail\", {\n      create: true,\n    });\n    saveAsset({\n      data: thumbnail,\n      handle: thumbnailHandle,\n    });\n    console.log(\"Thumbnail saved.\");\n\n    console.log(\"Fetching channel logo...\");\n    const channelIcon = await fetchAssetData(\n      (url) => {\n        return retry(async () => {\n          return await fetchBlob(url);\n        }, 3);\n      },\n      {\n        url: videoData.thumbnailUrl,\n      }\n    );\n    console.log(\"Channel logo fetched.\", channelIcon);\n    console.log(\"Saving channel logo...\");\n    const channelIconHandle = await videoDir.getFileHandle(\"channel-icon\", {\n      create: true,\n    });\n    saveAsset({\n      data: channelIcon,\n      handle: channelIconHandle,\n    });\n    console.log(\"Channel logo saved.\");\n\n    console.log(\"Fetching preview frames...\");\n    const previewFramesDir = await videoDir.getDirectoryHandle(\n      `preview-frames`,\n      {\n        create: true,\n      }\n    );\n    let index = 0;\n    for (const url of videoData.previewFrames[1].urls) {\n      const frame = await fetchAssetData(\n        (url) => {\n          return retry(async () => {\n            return await fetchBlob(url);\n          }, 3);\n        },\n        {\n          url,\n        }\n      );\n      console.log(`Getting file handle: preview-frame-${url.split(\"/\").pop()}`);\n      const frameHandle = await previewFramesDir.getFileHandle(`${index}`, {\n        create: true,\n      });\n      console.log(\"Saving preview frame...\", frame);\n      saveAsset({\n        data: frame,\n        handle: frameHandle,\n      });\n      index++;\n      console.log(\"Preview frame saved.\");\n    }\n\n    const downloaded = JSON.parse(localStorage.getItem(\"downloaded\") || \"[]\");\n    downloaded.push(videoId);\n    localStorage.setItem(\"downloaded\", JSON.stringify(downloaded));\n  } catch (error) {\n    console.error(\"Error downloading the video:\", error);\n    throw error;\n  }\n}\n\n/**\n * Reads a manifest file and returns its content as an array of lines.\n *\n * @param directory - Directory handle containing the manifest file.\n * @param manifestFile - Name of the manifest file.\n * @returns An array containing lines of the manifest file.\n */\nconst readManifestFileFromDirectory = async (\n  directory: any,\n  manifestFile: string\n) => {\n  console.log(\"Reading manifest file...\");\n  const fileHandle = await directory.getFileHandle(manifestFile);\n  const file = await fileHandle.getFile();\n  console.log(\"Manifest file read.\");\n  return (await file.text()).split(\"\\n\");\n};\n\n/**\n * Generates HLS content with the segments replaced.\n *\n * @param directory - Directory handle containing the segment files.\n * @param manifestContent - An array containing lines of the manifest file.\n * @returns A Blob URL containing the processed HLS content.\n */\nconst rebuildManifest = async (directory: any, manifestContent: string[]) => {\n  console.log(\"Rebuilding manifest...\", directory, manifestContent);\n  let content = \"\";\n  let segmentIndex = 0;\n  for (let line of manifestContent) {\n    console.log(\"Processing line...\", line);\n    if (line.includes(\"{segment}\")) {\n      const segmentFileHandle = await directory.getFileHandle(\n        `segment-${segmentIndex}.ts`\n      );\n      console.log(\"Getting segment file...\", segmentFileHandle);\n      const segmentFile = await segmentFileHandle.getFile();\n      const segmentUrl = URL.createObjectURL(segmentFile);\n      line = line.replace(\"{segment}\", segmentUrl);\n      segmentIndex++;\n    }\n    content += `${line}\\n`;\n  }\n  console.log(\"Manifest rebuilt.\", content);\n  return URL.createObjectURL(new Blob([content]));\n};\n\n/**\n * Generates an HLS manifest for a given video.\n *\n * @param videoId - The video ID.\n * @returns A Blob URL pointing to the HLS manifest.\n */\nexport async function getHlsManifest(videoId: string) {\n  console.time(\"manifest generating\");\n\n  console.log(\"Getting video data...\");\n  const storageRoot = await navigator.storage.getDirectory();\n  const videoDirectory = await storageRoot.getDirectoryHandle(videoId, {\n    create: false,\n  });\n\n  console.log(\"Reading video manifest...\");\n  const audioDirectory = await videoDirectory.getDirectoryHandle(\"audio\");\n  const videoDirectoryHandle = await videoDirectory.getDirectoryHandle(\"video\");\n\n  const audioManifestContent = await readManifestFileFromDirectory(\n    audioDirectory,\n    \"audio.m3u8\"\n  );\n  const videoManifestContent = await readManifestFileFromDirectory(\n    videoDirectoryHandle,\n    \"video.m3u8\"\n  );\n\n  console.log(\"Rebuilding audio manifest...\", audioManifestContent);\n  const audioContentUrl = await rebuildManifest(\n    audioDirectory,\n    audioManifestContent\n  );\n\n  console.log(\"Rebuilding video manifest...\", videoManifestContent);\n  const videoContentUrl = await rebuildManifest(\n    videoDirectoryHandle,\n    videoManifestContent\n  );\n\n  console.log(\"Generating master manifest...\");\n  const indexManifestHandle = await videoDirectory.getFileHandle(\"index.m3u8\");\n  console.log(\"master manifest handle\", indexManifestHandle);\n  const indexFile = await indexManifestHandle.getFile();\n  console.log(\"master manifest file\", indexFile);\n  const indexContent = (await indexFile.text())\n    .replace(\"{audio}\", audioContentUrl)\n    .replace(\"{video}\", videoContentUrl);\n  console.log(\"master manifest content\", indexContent);\n\n  console.timeEnd(\"manifest generating\");\n\n  return URL.createObjectURL(new Blob([indexContent]));\n}\n\nexport const getStreams = async (videoId: string) => {\n  console.log(\"Getting streams...\");\n  const storageRoot = await navigator.storage.getDirectory();\n  console.log(\"Storage root:\", storageRoot);\n  const videoDirectory = await storageRoot.getDirectoryHandle(videoId, {\n    create: false,\n  });\n  console.log(\"Video directory:\", videoDirectory);\n  if (!videoDirectory) {\n    return null;\n  }\n  const streamsFileHandle = await videoDirectory.getFileHandle(\"streams.json\");\n  const streamsFile = await streamsFileHandle.getFile();\n  console.log(\"Streams file:\", streamsFile);\n\n  const text = await streamsFile.text();\n  const streams = JSON.parse(text);\n  console.log(\"Streams:\", streams);\n  if (!streams) throw new Error(\"Streams not found\");\n  const thumbnailFileHandle = await videoDirectory.getFileHandle(\"thumbnail\");\n  const thumbnailFile = await thumbnailFileHandle.getFile();\n  const thumbnailUrl = URL.createObjectURL(thumbnailFile);\n  console.log(\"Thumbnail URL:\", thumbnailUrl);\n\n  const channelIconFileHandle = await videoDirectory.getFileHandle(\n    \"channel-icon\"\n  );\n  console.log(\"Channel icon file handle:\", channelIconFileHandle);\n  const channelIconFile = await channelIconFileHandle.getFile();\n  const channelIconUrl = URL.createObjectURL(channelIconFile);\n\n  console.log(\"Channel icon URL:\", channelIconUrl);\n  const subtitles = [];\n  streams.thumbnailUrl = thumbnailUrl;\n  streams.uploaderAvatar = channelIconUrl;\n  try {\n    const subtitlesDirectory = await videoDirectory.getDirectoryHandle(\n      `subtitles`,\n      {\n        create: false,\n      }\n    );\n    console.log(\"Subtitles directory:\", subtitlesDirectory);\n    for (const code of streams.subtitles) {\n      const subtitleFileHandle = await subtitlesDirectory.getFileHandle(\n        `${code}.srt`\n      );\n      const subtitleFile = await subtitleFileHandle.getFile();\n      const subtitleUrl = URL.createObjectURL(subtitleFile);\n      subtitles.push({\n        code,\n        url: subtitleUrl,\n      });\n    }\n  } catch (error) {\n    console.log(\"Error getting subtitles:\", error);\n  }\n\n  if (subtitles.length > 0) {\n    streams.subtitles = subtitles;\n  }\n  console.log(\"Getting preview frames...\");\n  let previewFramesDirectory;\n\n  try {\n    previewFramesDirectory = await videoDirectory.getDirectoryHandle(\n      `preview-frames`,\n      {\n        create: false,\n      }\n    );\n  } catch (error) {\n    console.log(\"Error getting preview frames:\", error);\n  }\n  console.log(\"Preview frames directory:\", previewFramesDirectory);\n  const urls = [];\n  let index = 0;\n  if (previewFramesDirectory) {\n    try {\n      for (const frameUrl of streams.previewFrames[1].urls) {\n        const frameFileHandle = await previewFramesDirectory.getFileHandle(\n          `${index}`\n        );\n        const frameFile = await frameFileHandle.getFile();\n        const frameUrl = URL.createObjectURL(frameFile);\n        urls.push(frameUrl);\n        index++;\n      }\n    } catch (error) {\n      console.log(\"Error getting preview frames:\", error);\n    }\n  }\n  console.log(\"Preview frames URLs:\", urls);\n  streams.previewFrames[1].urls = urls;\n  console.log(\"Streams:\", streams);\n\n  return streams;\n};\n","import { createQuery, isServer } from \"@tanstack/solid-query\";\nimport {\n  createEffect,\n  createSignal,\n  For,\n  Match,\n  Show,\n  Suspense,\n  Switch,\n} from \"solid-js\";\nimport { usePreferences } from \"~/stores/preferencesStore\";\nimport { RelatedPlaylist } from \"~/types\";\nimport api from \"~/utils/api\";\nimport { useSyncStore } from \"~/stores/syncStore\";\nimport VideoCard from \"./content/stream/VideoCard\";\nimport PlaylistCard from \"./content/playlist/PlaylistCard\";\nimport { useSearchParams } from \"@solidjs/router\";\n\nexport default function RelatedVideos() {\n  const [v, setV] = createSignal<string | undefined>(undefined);\n  const [preferences] = usePreferences();\n  const [searchParams] = useSearchParams();\n  createEffect(() => {\n    if (!searchParams.v) return;\n    setV(searchParams.v);\n  });\n  const sync = useSyncStore();\n\n  const videoQuery = createQuery(() => ({\n    queryKey: [\"streams\", v(), preferences.instance.api_url],\n    queryFn: () => api.fetchVideo(v(), preferences.instance.api_url),\n    enabled: v() && preferences.instance.api_url ? true : false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    cacheTime: Infinity,\n    staleTime: 100 * 60 * 1000,\n    deferStream: true,\n  }));\n  return (\n    <Show\n      when={videoQuery.data}\n      fallback={<For each={Array(20).fill(0)}>{() => <VideoCard />}</For>}\n    >\n      <div class=\"w-full max-w-max md:max-w-min\">\n        <For\n          each={videoQuery.data?.relatedStreams\n            // blocklist\n            .filter(\n              (item) =>\n                !sync.store.blocklist[item?.uploaderUrl?.split(\"/\").pop()!]\n            )}\n        >\n          {(stream) => {\n            return (\n              <Switch>\n                <Match when={stream.type === \"stream\"}>\n                  <VideoCard v={stream} layout=\"sm:grid\" />\n                </Match>\n                <Match when={stream.type === \"playlist\"}>\n                  <PlaylistCard item={stream as unknown as RelatedPlaylist} />\n                </Match>\n              </Switch>\n            );\n          }}\n        </For>\n      </div>\n    </Show>\n  );\n}\n","import { Dynamic, Portal } from \"solid-js/web\";\nimport {\n  Component,\n  createEffect,\n  createSignal,\n  JSX,\n  onCleanup,\n  onMount,\n} from \"solid-js\";\n\nconst DEFAULT_THRESHOLD = 50;\nconst VELOCITY_THRESHOLD = 0.5; // Units: pixels/ms\n\n\nexport interface BaseSolidBottomsheetProps {\n  children: JSX.Element;\n  onClose: () => void;\n  onIntersect?: () => void;\n}\n\nexport interface DefaultVariantProps extends BaseSolidBottomsheetProps {\n  variant: \"default\";\n}\n\nexport interface SnapVariantProps extends BaseSolidBottomsheetProps {\n  variant: \"snap\";\n  defaultSnapPoint: ({ maxHeight }: { maxHeight: number }) => number;\n  snapPoints: ({ maxHeight }: { maxHeight: number }) => number[];\n}\n\nexport type SolidBottomsheetProps = DefaultVariantProps | SnapVariantProps;\n\nexport const Bottomsheet: Component<SolidBottomsheetProps> = (props) => {\n  const isSnapVariant = props.variant === \"snap\";\n\n  const [maxHeight, setMaxHeight] = createSignal(window.visualViewport!.height);\n  const [isClosing, setIsClosing] = createSignal(false);\n  const [isSnapping, setIsSnapping] = createSignal(false);\n\n  const getDefaultTranslateValue = () => {\n    if (isSnapVariant) {\n      const defaultValue = props.defaultSnapPoint({ maxHeight: maxHeight() });\n      if (defaultValue !== maxHeight()) {\n        return window.innerHeight - defaultValue;\n      }\n    }\n    return 0;\n  };\n\n  const getSnapPoints = (maxHeight: number): number[] => {\n    return isSnapVariant\n      ? [0, ...props.snapPoints({ maxHeight }).sort((a, b) => b - a)]\n      : [];\n  };\n\n  const clampInRange = ({\n    minimum,\n    maximum,\n    current,\n  }: Record<\"minimum\" | \"maximum\" | \"current\", number>): number =>\n    Math.min(Math.max(current, minimum), maximum);\n\n  const [bottomsheetTranslateValue, setBottomsheetTranslateValue] =\n    createSignal(getDefaultTranslateValue());\n\n  const onViewportChange = () => {\n    setMaxHeight(window.visualViewport!.height);\n  };\n\n  onMount(() => {\n    // document.body.classList.add(\"overflow-hidden\");\n    window.visualViewport!.addEventListener(\"resize\", onViewportChange);\n  });\n\n  onCleanup(() => {\n    // document.body.classList.remove(\"overflow-hidden\");\n    window.visualViewport!.removeEventListener(\"resize\", onViewportChange);\n  });\n\n  createEffect(() => {\n    snapPoints = getSnapPoints(maxHeight());\n  });\n\n  let snapPoints: number[] = [];\n\n  let touchStartPosition = 0;\n  let lastTouchPosition = 0;\n  const acceptIds = new Set<string>([\"sb-handle\", \"sb-content\"]);\n\n  let lastTouchTime = 0;\n  let velocityY = 0;\n\n  const onTouchStart: JSX.EventHandlerUnion<HTMLDivElement, TouchEvent> = (\n    event\n  ) => {\n    if (!acceptIds.has(event.target.id) && !isEventFromContentChildren(event)) {\n      return;\n    }\n    lastTouchTime = event.timeStamp;\n    isSnapVariant && setIsSnapping(false);\n\n    touchStartPosition = lastTouchPosition = event.touches[0].clientY;\n    event.preventDefault();\n    event.stopPropagation();\n  };\n  const [contentScrollTop, setContentScrollTop] = createSignal(1);\n  const [isInitialTouch, setIsInitialTouch] = createSignal(true);\n\n  const onTouchMoveHandle: JSX.EventHandlerUnion<HTMLDivElement, TouchEvent> = (\n    event\n  ) => {\n    if (event.target.id !== \"sb-handle\") return;\n    event.preventDefault();\n    let dragDistance = 0;\n    const currentTime = event.timeStamp;\n    const timeDelta = currentTime - lastTouchTime;\n    if (timeDelta > 0) {\n      // Calculate velocity in pixels per millisecond\n      velocityY = dragDistance / timeDelta;\n    }\n    lastTouchTime = currentTime;\n\n    switch (props.variant) {\n      case \"snap\":\n        dragDistance = event.touches[0].clientY - lastTouchPosition;\n\n        setBottomsheetTranslateValue((previousVal) =>\n          clampInRange({\n            minimum: 0,\n            maximum: maxHeight(),\n            current: previousVal + dragDistance,\n          })\n        );\n\n        lastTouchPosition = event.touches[0].clientY;\n\n        break;\n      case \"default\":\n      default:\n        lastTouchPosition = event.touches[0].clientY;\n        dragDistance = lastTouchPosition - touchStartPosition;\n\n        if (dragDistance > 0) {\n          setBottomsheetTranslateValue(dragDistance);\n        }\n\n        break;\n    }\n  };\n\n  const onTouchMoveContent: JSX.EventHandlerUnion<\n    HTMLDivElement,\n    TouchEvent\n  > = (event) => {\n    if (!isEventFromContentChildren(event)) return;\n    console.log(\"onTouchMoveContent\", contentScrollTop());\n    if (contentScrollTop() > 5) return;\n    let dragDistance = 0;\n    const currentTime = event.timeStamp;\n    lastTouchTime = currentTime;\n\n    switch (props.variant) {\n      case \"snap\":\n        dragDistance = event.touches[0].clientY - lastTouchPosition;\n\n        setBottomsheetTranslateValue((previousVal) =>\n          clampInRange({\n            minimum: 0,\n            maximum: maxHeight(),\n            current: previousVal + dragDistance,\n          })\n        );\n\n        lastTouchPosition = event.touches[0].clientY;\n\n        break;\n      case \"default\":\n      default:\n        lastTouchPosition = event.touches[0].clientY;\n        dragDistance = lastTouchPosition - touchStartPosition;\n\n        if (dragDistance > 0) {\n          setBottomsheetTranslateValue(dragDistance);\n        }\n\n        break;\n    }\n  };\n  async function wait(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const isInertialScrolling = async (lastScrollTop: number) => {\n    await wait(100);\n    return new Promise((resolve) => {\n      if (lastScrollTop === contentScrollTop()) {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    });\n  };\n\n  const onTouchEnd: JSX.EventHandlerUnion<HTMLDivElement, TouchEvent> = async (\n    event\n  ) => {\n    if (!acceptIds.has(event.target.id) && !isEventFromContentChildren(event)) {\n      return;\n    }\n    let currentPoint = 0;\n    let closestPoint = 0;\n    const swipeDuration = event.timeStamp - lastTouchTime;\n    const swipeDistance = lastTouchPosition - touchStartPosition;\n    const swipeVelocity = -swipeDistance / swipeDuration;\n    console.log(\"swipeVelocity\", swipeVelocity, velocityY);\n\n    switch (props.variant) {\n      case \"snap\":\n        if (event.target.id !== \"sb-handle\") {\n          if (await isInertialScrolling(contentScrollTop())) {\n            console.log(\"isInertialScrolling\");\n            return;\n          }\n          setContentScrollTop(Math.max(0, contentScrollTop() - 1));\n          if (contentScrollTop() > 5) {\n            console.log(\"contentScrollTop\", contentScrollTop());\n            return;\n          }\n        }\n        // Decide to snap or close based on the swipe velocity as well as the distance\n        if (Math.abs(swipeVelocity) > VELOCITY_THRESHOLD || Math.abs(swipeDistance) > DEFAULT_THRESHOLD) {\n          // If the swipe is quick or long enough, determine the closest snap point or closing\n          currentPoint = (maxHeight() - lastTouchPosition) + (swipeVelocity * 2)\n\n          // Use velocity to determine if we should adjust our snap point\n          closestPoint = snapPoints.reduce((previousVal, currentVal) => {\n            return Math.abs(currentVal - currentPoint) <\n              Math.abs(previousVal - currentPoint)\n              ? currentVal\n              : previousVal;\n          });\n\n        } else {\n          currentPoint = maxHeight() - bottomsheetTranslateValue();\n          closestPoint = snapPoints.reduce((previousVal, currentVal) => {\n            return Math.abs(currentVal - currentPoint) <\n              Math.abs(previousVal - currentPoint)\n              ? currentVal\n              : previousVal;\n          }\n          );\n        }\n\n        if (closestPoint === 0) {\n          setIsClosing(true);\n        }\n\n        setIsSnapping(true);\n        setBottomsheetTranslateValue(maxHeight() - closestPoint);\n\n        break;\n      case \"default\":\n      default:\n        if (lastTouchPosition - touchStartPosition > DEFAULT_THRESHOLD) {\n          setIsClosing(true);\n        } else {\n          setBottomsheetTranslateValue(0);\n        }\n\n        break;\n    }\n  };\n\n  const isEventFromContentChildren = (\n    event: TouchEvent | MouseEvent\n  ): boolean => {\n    let target: EventTarget | null = event.target;\n\n    while (target) {\n      if ((target as HTMLElement).id === \"sb-content\") {\n        return true;\n      }\n\n      target = (target as HTMLElement).parentElement;\n    }\n\n    return false;\n  };\n\n  let sbHandle!: HTMLDivElement\n  onMount(() => {\n    const options = { passive: false };\n    sbHandle.addEventListener(\"touchstart\", onTouchStart as any, options);\n    sbHandle.addEventListener(\"touchmove\", onTouchMoveHandle as any, options);\n    sbHandle.addEventListener(\"touchend\", onTouchEnd as any, options);\n    sbHandle.addEventListener(\"touchcancel\", onTouchEnd as any, options);\n\n    onCleanup(() => {\n      sbHandle.removeEventListener(\"touchstart\", onTouchStart as any);\n      sbHandle.removeEventListener(\"touchmove\", onTouchMoveHandle as any);\n      sbHandle.removeEventListener(\"touchend\", onTouchEnd as any);\n      sbHandle.removeEventListener(\"touchcancel\", onTouchEnd as any);\n    });\n  });\n\n  return (\n    <Portal>\n      <div\n        id=\"sb-overlay\"\n        class=\"fixed inset-0 flex items-end pointer-events-none z-[999999]\"\n      >\n        <div\n          classList={{\n            \"w-full bg-bg1 pointer-events-auto\": true,\n            \"animate-out slide-out-to-bottom duration-500\": isClosing(),\n            \"animate-in slide-in-from-bottom \": !isClosing(),\n            \"transition-all duration-250\": isSnapping(),\n          }}\n          style={{\n            transform: `translateY(${bottomsheetTranslateValue()}px)`,\n            ...(isSnapVariant ? { height: `${maxHeight()}px` } : {}),\n          }}\n          {...(isClosing() ? { onAnimationEnd: props.onClose } : {})}\n        >\n          <div\n            id=\"sb-handle\"\n            class=\"py-5 my-0 mx-auto bg-bg1\"\n            ref={sbHandle}\n\n          >\n            <div class=\"w-10 h-1 m-auto bg-bg3 pointer-events-none\" />\n          </div>\n          <div\n            id=\"sb-content\"\n            class=\"relative w-full h-full bg-bg1 overscroll-contain\"\n            classList={{\n              \"overflow-y-auto\": true,\n            }}\n            style={{\n              height: `calc(100vh - ${bottomsheetTranslateValue()}px)`,\n            }}\n            onScroll={(e) => {\n              setContentScrollTop(e.currentTarget.scrollTop + 1);\n            }}\n            onTouchStart={onTouchStart}\n            onTouchMove={onTouchMoveContent}\n            onTouchEnd={onTouchEnd}\n          >\n            {props.children}\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n","// TODO: Pinned, verified, hearted\nimport { createInfiniteQuery } from \"@tanstack/solid-query\";\nimport { FaSolidThumbsUp } from \"solid-icons/fa\";\nimport { Show, createSignal, useContext, Suspense, For, createEffect } from \"solid-js\";\nimport { usePreferences } from \"~/stores/preferencesStore\";\nimport { useSyncStore } from \"~/stores/syncStore\";\nimport { fetchJson } from \"~/utils/helpers\";\nimport { sanitizeText } from \"./Description\";\nimport Link from \"./Link\";\nexport interface PipedCommentResponse {\n  comments: PipedComment[];\n  disabled: boolean;\n  nextpage: string;\n}\n\nexport interface PipedComment {\n  author: string;\n  thumbnail: string;\n  commentId: string;\n  commentText: string;\n  commentedTime: string;\n  commentorUrl: string;\n  repliesPage?: string;\n  likeCount: number;\n  replyCount: number;\n  hearted: boolean;\n  pinned: boolean;\n  verified: boolean;\n}\n\ninterface Props {\n  videoId: string;\n  comment: PipedComment;\n  nextpage: string;\n  uploader: string;\n}\nexport default function Comment(props: Props) {\n  const [loadingReplies, setLoadingReplies] = createSignal(false);\n  const [showingReplies, setShowingReplies] = createSignal(false);\n  const [replies, setReplies] = createSignal([]);\n  const [nextpage, setNextpage] = createSignal(null);\n  const store = useSyncStore();\n  const [preferences] = usePreferences();\n  const fetchComments = async ({\n    pageParam = \"initial\",\n  }): Promise<PipedCommentResponse> => {\n    if (pageParam === \"initial\") {\n      return await fetchJson(\n        `${preferences.instance.api_url}/nextpage/comments/${props.videoId}`,\n        {\n          nextpage: props.comment.repliesPage!,\n        }\n      );\n    } else {\n      return await fetchJson(\n        `${preferences.instance.api_url}/nextpage/comments/${props.videoId}`,\n        {\n          nextpage: pageParam,\n        }\n      );\n    }\n  };\n\n  const query = createInfiniteQuery(() => ({\n    queryKey: [\n      \"commentsReplies\",\n      props.videoId,\n      preferences.instance.api_url,\n      props.comment.commentId,\n    ],\n    queryFn: fetchComments,\n    enabled: preferences.instance?.api_url &&\n      props.videoId &&\n      props.comment.repliesPage &&\n      showingReplies()\n      ? true\n      : false,\n    getNextPageParam: (lastPage) => {\n      return lastPage.nextpage;\n    },\n    initialPageParam: \"initial\"\n  })\n  );\n  async function hideReplies() {\n    setShowingReplies(false);\n  }\n\n  const [sanitizedText, setSanitizedText] = createSignal(\"\");\n  createEffect(async () => {\n    setSanitizedText(await sanitizeText(props.comment.commentText));\n  });\n\n  return (\n    <>\n      <div class=\"flex  gap-2 \">\n        <Link\n          href={`${props.comment.commentorUrl}`}\n          class=\"w-1/12 rounded-full justify-center flex h-fit\"\n        >\n          <img\n            width=\"48\"\n            height=\"48\"\n            src={props.comment.thumbnail}\n            alt=\"\"\n            class=\"rounded-full w-full h-full\"\n          />\n        </Link>\n        <div class=\"flex flex-col  w-11/12\">\n          <span class=\"flex gap-2 items-center\">\n            <Link\n              href={`${props.comment.commentorUrl}`}\n              class={`text-sm font-bold ${props.comment.commentorUrl === props.uploader &&\n                \"bg-background rounded-full px-4\"\n                }`}\n            >\n              {props.comment.author}\n            </Link>\n            {props.comment.verified && (\n              <svg\n                class=\"w-4 h-4\"\n                viewBox=\"0 0 24 24\"\n                fill=\"currentColor\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fill-rule=\"evenodd\"\n                  clip-rule=\"evenodd\"\n                  d=\"M12.0001 2.00001C6.47715 2.00001 2.00006 6.4771 2.00006 12C2.00006 17.5229 6.47715 22 12.0001 22C17.5229 22 22 17.5229 22 12C22 6.4771 17.5229 2.00001 12.0001 2.00001ZM12.0001 4.00001C16.4182 4.00001 20.0001 7.58191 20.0001 12C20.0001 16.4181 16.4182 20 12.0001 20C7.58199 20 4.00006 16.4181 4.00006 12C4.00006 7.58191 7.58199 4.00001 12.0001 4.00001ZM11.9999 7.00001C11.4477 7.00001 10.9999 7.44772 10.9999 8.00001V12.0001L8.99994 12.0001C8.44775 12.0001 7.99994 12.4478 7.99994 13.0001C7.99994 13.5523 8.44775 14.0001 8.99994 14.0001L11.9999 14.0001V18.0001C11.9999 18.5523 12.4477 19.0001 12.9999 19.0001C13.5521 19.0001 13.9999 18.5523 13.9999 18.0001V8.00001C13.9999 7.44772 13.5521 7.00001 11.9999 7.00001Z\"\n                />\n              </svg>\n            )}\n            <p class=\"text-xs text-text2\">{props.comment.commentedTime}</p>\n          </span>\n          <Suspense fallback={<p>Loading...</p>}>\n            <p\n              class=\"text-xs\"\n              innerHTML={sanitizedText()}\n            ></p>\n          </Suspense>\n          <span class=\"flex gap-1 items-center text-xs \">\n            <FaSolidThumbsUp />\n            {props.comment.likeCount}\n            <Show when={props.comment.replyCount > 0 && !showingReplies()}>\n              {props.comment.replyCount > 1 && (\n                <button\n                  onClick={() => setShowingReplies(true)}\n                  class=\"underline\"\n                >\n                  View {props.comment.replyCount} replies\n                </button>\n              )}\n              {props.comment.replyCount === 1 && (\n                <button\n                  onClick={() => setShowingReplies(true)}\n                  class=\"underline\"\n                >\n                  View 1 reply\n                </button>\n              )}\n            </Show>\n            <Show when={showingReplies()}>\n              <button\n                onClick={() => setShowingReplies(false)}\n                class=\"underline\"\n              >\n                Hide replies\n              </button>\n            </Show>\n          </span>\n        </div>\n      </div>\n      <Show when={showingReplies()}>\n        <div class=\"ml-8 my-2\">\n          <Suspense fallback={<div class=\"text-xs\">Loading...</div>}>\n            <For\n              each={query.data?.pages\n                ?.flat()\n                ?.map((page) => page.comments)\n                .flat()}\n            >\n              {(comment) => (\n                <Comment\n                  comment={comment}\n                  uploader={props.uploader}\n                  videoId={props.videoId}\n                  nextpage={\"\"}\n                />\n              )}\n            </For>\n            <Show when={query.hasNextPage}>\n              <button\n                onClick={() => query.fetchNextPage()}\n                class=\"text-xs underline\"\n              >\n                Load more replies\n              </button>\n            </Show>\n          </Suspense>\n        </div>\n      </Show>\n    </>\n  );\n}\n","import { createInfiniteQuery } from \"@tanstack/solid-query\";\nimport { createEffect, createSignal, Match, onCleanup, onMount, Show, Suspense, Switch } from \"solid-js\";\nimport { For } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\nimport useIntersectionObserver from \"~/hooks/useIntersectionObserver\";\nimport { usePreferences } from \"~/stores/preferencesStore\";\nimport { fetchJson, isMobile } from \"~/utils/helpers\";\nimport { Bottomsheet } from \"./Bottomsheet\";\nimport Comment, { PipedCommentResponse } from \"./Comment\";\n\nexport default function Comments(props: {\n  videoId: string; uploader: string;\n  display: \"default\" | \"bottomsheet\"\n}) {\n  const [preferences] = usePreferences();\n  const fetchComments = async ({\n    pageParam = \"initial\",\n  }): Promise<PipedCommentResponse> => {\n    if (pageParam === \"initial\") {\n      return await (\n        await fetch(`${preferences.instance.api_url}/comments/${props.videoId}`)\n      ).json();\n    } else {\n      return await fetchJson(\n        `${preferences.instance.api_url}/nextpage/comments/${props.videoId}`,\n        {\n          nextpage: pageParam,\n        }\n      );\n    }\n  };\n  const [playerHeight, setPlayerHeight] = createSignal(0);\n  createEffect(() => {\n    const player = document.querySelector(\"media-player\");\n    if (player) {\n      setPlayerHeight(player.clientHeight + 50);\n    }\n  });\n\n  const query = createInfiniteQuery(() => ({\n    queryKey: [\"comments\", props.videoId, preferences.instance.api_url],\n    queryFn: fetchComments,\n    enabled: (preferences.instance?.api_url && props.videoId) ? true : false,\n    getNextPageParam: (lastPage) => {\n      return lastPage.nextpage;\n    },\n    initialPageParam: \"initial\",\n  })\n  );\n  const [commentsOpen, setCommentsOpen] = createSignal(false);\n  const [intersectionRef, setIntersectionRef] = createSignal<\n    HTMLDivElement | undefined\n  >(undefined);\n\n  const isIntersecting = useIntersectionObserver({\n    setTarget: () => intersectionRef(),\n  });\n\n  createEffect(() => {\n    if (isIntersecting()) {\n      if (query.hasNextPage) {\n        query.fetchNextPage();\n      }\n    }\n  });\n\n\n  return (\n    <>\n      <Switch>\n        <Match when={props.display === \"bottomsheet\"}>\n          <button\n            class=\"text-center text-sm w-full rounded-lg bg-bg2 p-2 mb-2\"\n            onClick={() => setCommentsOpen(true)}\n          >\n            Comments\n          </button>\n          {commentsOpen() && (\n            <Bottomsheet\n              variant=\"snap\"\n              defaultSnapPoint={({ maxHeight }) => maxHeight - playerHeight() ?? 300}\n              snapPoints={({ maxHeight }) => [maxHeight - 40, maxHeight - playerHeight() ?? 300]}\n              onClose={() => {\n                console.log(\"close\");\n                setCommentsOpen(false);\n              }}\n            >\n              {/* <div class=\"text-text1 bg-bg1 p-2 rounded-t-lg max-h-full max-w-full overflow-auto\"> */}\n              <Suspense fallback={<p>Loading...</p>}>\n                <div id=\"sb-content\" class=\"flex flex-col gap-1 relative z-50 \">\n                  <Show when={query.data}>\n                    <For each={query.data!.pages}>\n                      {(page) => (\n                        <For each={page.comments\n                          .filter((c) => c.commentText)\n                        }>\n                          {(comment) => (\n                            <Comment\n                              videoId={props.videoId}\n                              comment={comment}\n                              uploader={props.uploader}\n                              nextpage={\"\"}\n                            />\n                          )}\n                        </For>\n                      )}\n                    </For>\n                    <div\n                      class=\"w-full h-40 bg-primary\"\n                      ref={(ref) => setIntersectionRef(ref)}\n                    />\n                  </Show>\n                </div>\n              </Suspense>\n              {/* </div> */}\n            </Bottomsheet>\n          )}\n        </Match>\n        <Match when={props.display === \"default\"}>\n          <div class=\"text-text1 bg-bg1 p-2 rounded-t-lg max-w-full overflow-y-auto \">\n            <Suspense fallback={<p>Loading...</p>}>\n              <div id=\"sb-content\" class=\"flex flex-col gap-1 relative  \">\n                <Show when={query.data}>\n                  <For each={query.data!.pages}>\n                    {(page) => (\n                      <For each={page.comments\n                          .filter((c) => c.commentText)\n                      }>\n                        {(comment) => (\n                          <Comment\n                            videoId={props.videoId}\n                            comment={comment}\n                            uploader={props.uploader}\n                            nextpage={\"\"}\n                          />\n                        )}\n                      </For>\n                    )}\n                  </For>\n                  <div\n                    class=\"w-full h-40 bg-primary\"\n                    ref={(ref) => setIntersectionRef(ref)}\n                  />\n                </Show>\n              </div>\n            </Suspense>\n          </div>\n        </Match>\n      </Switch>\n    </>\n  );\n}\n","// TODO: Integrate offline playback\nimport Description from \"~/components/Description\";\nimport {\n  Show,\n  createEffect,\n  createSignal,\n  onMount,\n  untrack,\n  useContext,\n  Switch,\n  Match,\n  onCleanup,\n} from \"solid-js\";\nimport { For } from \"solid-js\";\nimport { getHlsManifest, getStreams } from \"~/utils/hls\";\nimport { usePlaylist } from \"~/stores/playlistStore\";\nimport { useSyncStore } from \"~/stores/syncStore\";\nimport { useAppState } from \"~/stores/appStateStore\";\nimport { createQuery } from \"@tanstack/solid-query\";\nimport { Chapter, PipedVideo, RelatedPlaylist } from \"~/types\";\nimport { usePreferences } from \"~/stores/preferencesStore\";\nimport { Suspense } from \"solid-js\";\nimport numeral from \"numeral\";\nimport { isServer } from \"solid-js/web\";\nimport api from \"~/utils/api\";\nimport RelatedVideos from \"~/components/RelatedVideos\";\nimport Comments from \"~/components/Comments\";\nimport { getVideoId, isMobile } from \"~/utils/helpers\";\nimport PlaylistItem from \"~/components/content/playlist/PlaylistItem\";\nimport { useLocation, useSearchParams } from \"@solidjs/router\";\n\nexport interface SponsorSegment {\n  category: string;\n  actionType: string;\n  segment: number[];\n  UUID: string;\n  videoDuration: number;\n  locked: number;\n  votes: number;\n  description: string;\n}\n\nexport async function fetchWithTimeout(\n  resource: string,\n  options: RequestInit & { timeout: number } = { timeout: 800 }\n) {\n  const { timeout } = options;\n\n  const controller = new AbortController();\n  const id = setTimeout(() => {\n    console.log(\"aborting\");\n    controller.abort(`Request exceeded timeout of ${timeout}ms.`);\n  }, timeout);\n  console.log(\"fetching\", controller.signal);\n  const response = await fetch(resource, {\n    ...options,\n    signal: controller.signal,\n  });\n  clearTimeout(id);\n\n  return response;\n}\n\nexport default function Watch() {\n  console.log(new Date().toISOString().split(\"T\")[1], \"rendering watch page\");\n\n  const route = useLocation();\n  const [preferences] = usePreferences();\n\n  const [v, setV] = createSignal<string | undefined>(undefined);\n  createEffect(() => {\n    if (!route.query.v) return;\n    setV(route.query.v);\n  });\n  const videoQuery = createQuery<any, any, PipedVideo>(() => ({\n    queryKey: [\"streams\", v(), preferences.instance.api_url],\n    queryFn: () => api.fetchVideo(v(), preferences.instance.api_url),\n    enabled: v() && preferences.instance.api_url ? true : false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    cacheTime: Infinity,\n    staleTime: 100 * 60 * 1000,\n    deferStream: true,\n  }));\n\n  const [playlist, setPlaylist] = usePlaylist();\n\n  const [videoDownloaded, setVideoDownloaded] = createSignal(true);\n  createEffect(async () => {\n    if (!route.query.v) return;\n    console.time(\"verifyDownloaded\");\n    if (!(\"getDirectory\" in navigator.storage)) {\n      setVideoDownloaded(false);\n      return;\n    }\n    try {\n      const downloaded = await getStreams(route.query.v);\n      console.log(\"downloaded\", downloaded);\n      if (downloaded) {\n        console.log(\"video downloaded\");\n        const manifest = await getHlsManifest(route.query.v);\n        console.log(\"manifest\", manifest);\n        // setVideo({\n        //   value: {\n        //     ...downloaded,\n        //     hls: manifest,\n        //   },\n        // });\n        // console.log(video.value, \"previewFrames\");\n        return;\n      } else {\n        console.log(\"video not downloaded\");\n        setVideoDownloaded(false);\n        console.timeEnd(\"verifyDownloaded\");\n      }\n    } catch (e) {\n      console.log(e);\n      setVideoDownloaded(false);\n      return;\n    }\n  });\n\n  const [appState, setAppState] = useAppState();\n  const sync = useSyncStore();\n  const isLocalPlaylist = () => route.query.list?.startsWith(\"conduit-\");\n  const sponsorsQuery = createQuery<SponsorSegment[]>(() => ({\n    queryKey: [\"sponsors\", route.query.v, preferences.instance.api_url],\n    queryFn: async (): Promise<SponsorSegment[]> => {\n      const sha256Encrypted = await globalThis.crypto.subtle.digest(\n        \"SHA-256\",\n        new TextEncoder().encode(route.query.v)\n      );\n      const sha256Array = Array.from(new Uint8Array(sha256Encrypted));\n      const prefix = sha256Array\n        .map((b) => b.toString(16).padStart(2, \"0\"))\n        .join(\"\")\n        .slice(0, 5);\n      const urlObj = new URL(\n        \"https://sponsor.ajay.app/api/skipSegments/\" + prefix\n      );\n      urlObj.searchParams.set(\n        \"categories\",\n        JSON.stringify([\n          \"sponsor\",\n          \"interaction\",\n          \"selfpromo\",\n          \"music_offtopic\",\n        ])\n      );\n      const url = urlObj.toString();\n      console.log(url);\n      const res = await fetch(url);\n      if (!res.ok) {\n        if (res.status === 404) {\n          return Promise.reject(\"no sponsors found\");\n        } else {\n          const text = await res.text();\n          return Promise.reject(\"error fetching sponsors: \" + text);\n        }\n      }\n      const data = await res.json();\n      const video = data.find((v: any) => v.videoID === route.query.v);\n      if (!video) {\n        return Promise.reject(\"no sponsors found\");\n      }\n      return video.segments;\n    },\n    enabled:\n      preferences.instance?.api_url && !isServer && route.query.v\n        ? true\n        : false,\n    refetchOnReconnect: false,\n    retry: false,\n    suspense: false,\n    useErrorBoundary: false,\n  }));\n  const playlistQuery = createQuery(() => ({\n    queryKey: [\"playlist\", route.query.list, preferences.instance.api_url],\n    queryFn: async () => {\n      const res = await fetch(\n        `${preferences.instance.api_url}/playlists/${route.query.list}`\n      );\n      if (!res.ok) {\n        // throw new Error(\"Failed to fetch playlist\");\n        return;\n      }\n      return await res.json();\n    },\n    enabled:\n      preferences.instance?.api_url && route.query.list && !isLocalPlaylist()\n        ? true\n        : false,\n    refetchOnReconnect: false,\n  }));\n  createEffect(() => {\n    console.log(sync.store, \"STORE\");\n    console.log(sponsorsQuery.data, sponsorsQuery.error);\n  });\n\n  createEffect(() => {\n    if (playlistQuery.isSuccess) {\n      setPlaylist(playlistQuery.data);\n    } else {\n      setPlaylist(undefined);\n    }\n  });\n\n  const mergeChaptersAndSponsors = (\n    chapters: Chapter[],\n    sponsors: SponsorSegment[]\n  ): Chapter[] => {\n    const sortedChapters = [...chapters].sort((a, b) => a.start - b.start);\n    const sortedSponsors = [...sponsors].sort(\n      (a, b) => a.segment[0] - b.segment[0]\n    );\n\n    const result: Chapter[] = [];\n\n    let chapterIndex = 0;\n    let sponsorIndex = 0;\n\n    while (\n      chapterIndex < sortedChapters.length ||\n      sponsorIndex < sortedSponsors.length\n    ) {\n      const currentChapter = sortedChapters[chapterIndex];\n      const currentSponsor = sortedSponsors[sponsorIndex];\n      const nextChapter = sortedChapters[chapterIndex];\n\n      const nextSegmentStart = nextChapter?.start ?? Number.MAX_SAFE_INTEGER;\n\n      if (\n        currentChapter &&\n        (!currentSponsor || currentChapter.start <= currentSponsor.segment[0])\n      ) {\n        result.push(currentChapter);\n        chapterIndex++;\n      } else if (currentSponsor) {\n        result.push({\n          title: `Sponsor: ${currentSponsor.category}`,\n          start: currentSponsor.segment[0],\n        } as Chapter);\n\n        if (Math.abs(nextSegmentStart - currentSponsor.segment[1]) >= 5) {\n          console.log(\n            \"Next chapter is more than 5s after end of sponsor, adding chapter. \",\n            \"next segment start is: \",\n            numeral(nextSegmentStart).format(\"00:00:00\"),\n            \"current sponsor end is: \",\n            numeral(currentSponsor.segment[1]).format(\"00:00:00\"),\n            \"absolute value is: \",\n            Math.abs(nextSegmentStart - currentSponsor.segment[1])\n          );\n          result.push({\n            title: `End Sponsor: ${currentSponsor.category}`,\n            start: currentSponsor.segment[1],\n          } as Chapter);\n        }\n\n        sponsorIndex++;\n      }\n    }\n\n    return result;\n  };\n  // createEffect(() => {\n  //   console.log(sponsorsQuery.data);\n  //   if (!sponsorsQuery.data) return;\n  //   const video = untrack(() => videoQuery.data);\n  //   if (!video) return;\n  //   const mergedChapters = mergeChaptersAndSponsors(\n  //     video.chapters,\n  //     sponsorsQuery.data\n  //   );\n  //   console.log(mergedChapters);\n  //   // setVideo(\"value\", \"chapters\", mergedChapters);\n  // });\n  //\n  // createEffect(() => {\n  //   setAppState({\n  //     loading:\n  //       videoQuery.isInitialLoading ||\n  //       videoQuery.isFetching ||\n  //       videoQuery.isRefetching,\n  //   });\n  // });\n  //\n  // createEffect(() => {\n  //   if (videoQuery.data) {\n  //     setVideo({ value: videoQuery.data });\n  //   }\n  // });\n  //\n  createEffect(() => {\n    if (!videoQuery.data) return;\n    document.title = `${videoQuery.data.title} - Conduit`;\n  });\n\n  const [playlistScrollContainer, setPlaylistScrollContainer] = createSignal<\n    HTMLDivElement | undefined\n  >();\n\n  const [listId, setListId] = createSignal<string | undefined>(undefined);\n  createEffect(() => {\n    if (!route.query.list) {\n      setPlaylist(undefined);\n      return;\n    }\n  });\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // createEffect(async () => {\n  //   if (!route.query.list) return;\n  //   if (isLocalPlaylist()) return;\n  //   const json = await fetchJson(\n  //     `${instance().api_url}/playlists/${route.query.list}`\n  //   );\n  //   setPlaylist({ ...json, id: route.query.list });\n  //   console.log(json);\n  // });\n\n  createEffect(async () => {\n    if (!route.query.list) {\n      setPlaylist(undefined);\n      console.log(\"fetching playlist no list id\");\n      return;\n    }\n    if (!isLocalPlaylist()) return;\n    console.log(\"fetching playlist\");\n    setListId(route.query.list);\n    console.log(\"fetching playlistlist id\", listId());\n    if (!listId()) return;\n    const list = sync.store.playlists[listId()!];\n    console.log(\"setting playlist\", list);\n    setPlaylist(list);\n    setTimeout(() => {\n      playlistScrollContainer()?.scrollTo({\n        top: route.query.index ? Number(route.query.index) * 80 : 0,\n        behavior: \"smooth\",\n      });\n    }, 100);\n  });\n  createEffect(() => {\n    setAppState(\"player\", \"dismissed\", false);\n    setAppState(\"player\", \"small\", false);\n  });\n\n  const [windowWidth, setWindowWidth] = createSignal(1000);\n\n  onMount(() => {\n    setWindowWidth(window.innerWidth);\n    window.addEventListener(\"resize\", (e) => {\n      setWindowWidth(window.innerWidth);\n    });\n\n    onCleanup(() => {\n      window.removeEventListener(\"resize\", (e) => {\n        setWindowWidth(window.innerWidth);\n      });\n    });\n  });\n  return (\n    <div\n      class=\"flex\"\n      classList={{\n        \"flex-col\": !!searchParams.fullscreen,\n        \"flex-col lg:flex-row\": !searchParams.fullscreen,\n      }}\n    >\n      <div\n        class=\"flex flex-col\"\n        classList={{\n          \"flex-grow\": !searchParams.fullscreen,\n          \"w-full\": !!searchParams.fullscreen,\n        }}\n      >\n        {/* <Switch>\n            <Match when={videoQuery.isLoading && !video.value}>\n              <PlayerLoading />\n            </Match>\n            <Match when={videoQuery.error}>\n              <PlayerError error={videoQuery.error as Error} />\n            </Match>\n            <Match when={videoQuery.data}> */}\n        <Show when={searchParams.fullscreen}>\n          <div class=\"h-[calc(100vh-2rem)]\" />\n        </Show>\n        {/* </Match>\n          </Switch> */}\n      </div>\n      <div class=\"flex sm:flex-row flex-col md:gap-2 w-full\">\n        <div class=\"w-full max-w-full\">\n          <Description downloaded={videoDownloaded()} />\n          <Show when={(windowWidth() > 600 || isMobile()) && videoQuery.data}>\n            <div class=\"mx-4\">\n              <Comments\n                videoId={getVideoId(videoQuery.data)!}\n                uploader={videoQuery.data!.uploader}\n                display={windowWidth() > 600 ? \"default\" : \"bottomsheet\"}\n              />\n            </div>\n          </Show>\n        </div>\n        <div\n          class={`flex flex-col gap-2 items-center w-full min-w-0 max-w-max`}\n        >\n          <Show when={playlist()} keyed>\n            {(list) => (\n              <div\n                role=\"group\"\n                aria-label=\"Playlist\"\n                class=\"overflow-hidden rounded-xl w-full p-2 max-w-[400px] min-w-0\"\n              >\n                <div\n                  ref={setPlaylistScrollContainer}\n                  class=\"relative flex flex-col gap-2 min-w-full md:min-w-[20rem] w-full bg-bg2 max-h-[30rem] px-1 overflow-y-auto scrollbar\"\n                >\n                  <h3 class=\"sticky top-0 left-0 z-10 text-lg font-bold sm:text-xl \">\n                    {list.name} - {route.query.index} /{\" \"}\n                    {list.relatedStreams.length}\n                  </h3>\n                  <For each={list.relatedStreams}>\n                    {(item, index) => {\n                      return (\n                        <PlaylistItem\n                          list={route.query.list}\n                          index={index() + 1}\n                          v={item}\n                          active={route.query.index ?? 1}\n                        />\n                      );\n                    }}\n                  </For>\n                </div>\n              </div>\n            )}\n          </Show>\n          <div class=\"relative max-w-max sm:max-w-min\">\n            <RelatedVideos />\n          </div>\n        </div>\n        <Show when={windowWidth() <= 600 && !isMobile() && videoQuery.data}>\n          <Comments\n            videoId={getVideoId(videoQuery.data)!}\n            uploader={videoQuery.data!.uploader}\n            display=\"default\"\n          />\n        </Show>\n      </div>\n    </div>\n  );\n}\n"],"names":["readManifestFileFromDirectory","directory","manifestFile","console","log","file","getFileHandle","getFile","text","split","rebuildManifest","manifestContent","content","segmentIndex","line","includes","segmentFileHandle","segmentFile","segmentUrl","URL","createObjectURL","replace","Blob","getHlsManifest","videoId","time","videoDirectory","navigator","storage","getDirectory","getDirectoryHandle","create","audioDirectory","videoDirectoryHandle","audioManifestContent","videoManifestContent","audioContentUrl","videoContentUrl","indexManifestHandle","indexFile","indexContent","timeEnd","getStreams","storageRoot","streamsFile","streams","JSON","parse","Error","thumbnailFile","thumbnailUrl","channelIconFileHandle","channelIconFile","channelIconUrl","subtitles","uploaderAvatar","subtitlesDirectory","code","subtitleFile","subtitleUrl","push","url","error","length","previewFramesDirectory","urls","index","frameUrl","previewFrames","frameFile","RelatedVideos","v","setV","createSignal","undefined","preferences","usePreferences","searchParams","useSearchParams","createEffect","sync","useSyncStore","videoQuery","createQuery","queryKey","instance","api_url","queryFn","api","fetchVideo","enabled","refetchOnReconnect","refetchOnMount","cacheTime","Infinity","staleTime","deferStream","_$createComponent","Show","when","data","fallback","For","each","Array","fill","children","VideoCard","_el$","_$getNextElement","_tmpl$","relatedStreams","filter","item","store","blocklist","uploaderUrl","pop","stream","Switch","Match","type","layout","PlaylistCard","DEFAULT_THRESHOLD","VELOCITY_THRESHOLD","Bottomsheet","props","isSnapVariant","variant","maxHeight","setMaxHeight","window","visualViewport","height","isClosing","setIsClosing","isSnapping","setIsSnapping","getDefaultTranslateValue","defaultValue","defaultSnapPoint","innerHeight","getSnapPoints","snapPoints","sort","a","b","clampInRange","minimum","maximum","current","Math","min","max","bottomsheetTranslateValue","setBottomsheetTranslateValue","onViewportChange","onMount","addEventListener","onCleanup","removeEventListener","touchStartPosition","lastTouchPosition","acceptIds","Set","lastTouchTime","velocityY","onTouchStart","event","has","target","id","isEventFromContentChildren","timeStamp","touches","clientY","preventDefault","stopPropagation","contentScrollTop","setContentScrollTop","onTouchMoveHandle","dragDistance","currentTime","timeDelta","previousVal","onTouchMoveContent","wait","ms","Promise","resolve","setTimeout","isInertialScrolling","lastScrollTop","onTouchEnd","currentPoint","closestPoint","swipeDuration","swipeDistance","swipeVelocity","abs","reduce","currentVal","parentElement","sbHandle","options","passive","Portal","_el$2","firstChild","_el$3","_el$4","nextSibling","_$spread","_$mergeProps","classList","style","transform","onAnimationEnd","onClose","_ref$","_$use","$$touchend","$$touchmove","$$touchstart","e","currentTarget","scrollTop","_$effect","setProperty","removeProperty","_$runHydrationEvents","_$delegateEvents","Comment","showingReplies","setShowingReplies","fetchComments","pageParam","fetchJson","nextpage","comment","repliesPage","query","createInfiniteQuery","commentId","getNextPageParam","lastPage","initialPageParam","sanitizedText","setSanitizedText","sanitizeText","commentText","_tmpl$4","_el$23","_el$24","_co$8","_$getNextMarker","_el$6","_el$7","_co$","_el$8","_el$9","_co$2","_el$5","_el$21","_el$22","_co$7","_el$11","_el$13","_el$14","_co$3","_el$15","_el$16","_co$4","_el$17","_el$18","_co$5","_el$19","_el$20","_co$6","Link","href","commentorUrl","_$setAttribute","thumbnail","uploader","author","_$insert","_c$","_$memo","verified","_tmpl$7","commentedTime","Suspense","_tmpl$8","_el$10","_tmpl$2","_$setProperty","FaSolidThumbsUp","likeCount","replyCount","_el$29","_tmpl$9","_el$30","_el$32","_el$33","_co$9","$$click","_el$34","_tmpl$10","_el$12","_tmpl$3","_el$25","_tmpl$6","_tmpl$11","pages","flat","map","page","comments","hasNextPage","_el$26","_tmpl$5","fetchNextPage","Comments","fetch","json","playerHeight","setPlayerHeight","player","document","querySelector","clientHeight","commentsOpen","setCommentsOpen","intersectionRef","setIntersectionRef","isIntersecting","useIntersectionObserver","setTarget","display","c","ref","Watch","Date","toISOString","route","useLocation","playlist","setPlaylist","usePlaylist","videoDownloaded","setVideoDownloaded","downloaded","manifest","appState","setAppState","useAppState","isLocalPlaylist","list","startsWith","sponsorsQuery","sha256Encrypted","globalThis","crypto","subtle","digest","TextEncoder","encode","prefix","from","Uint8Array","toString","padStart","join","slice","urlObj","set","stringify","res","ok","status","reject","video","find","videoID","segments","isServer","retry","suspense","useErrorBoundary","playlistQuery","isSuccess","title","playlistScrollContainer","setPlaylistScrollContainer","listId","setListId","setSearchParams","playlists","scrollTo","top","Number","behavior","windowWidth","setWindowWidth","innerWidth","fullscreen","Description","isMobile","getVideoId","keyed","_el$27","_el$28","name","PlaylistItem","active","_p$","_v$","_v$2","_v$3"],"mappings":"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"}