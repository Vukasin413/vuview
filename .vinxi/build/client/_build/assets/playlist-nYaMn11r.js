import{j as x,X as w,A as d,e as t,a as S,r as v,w as f,S as y,G as P,y as _}from"./routing-BmD2xUmi.js";import{L as b,I as q}from"./syncStore-BssUQgBy.js";import{c as L}from"./index-B3L84c1c.js";import{P as $}from"./PlaylistItem-DDP9XZge.js";import{T}from"./index-DyZHI5kj.js";import"./Link-Dg-h0Eyu.js";import"./components-BMGKah2q.js";import"./index-BnPmuIsI.js";import"./index-DPECAXpK.js";import"./index-Cb4tY8hP.js";var j=_('<div class="max-w-5xl mx-auto"><h1 class="text-2xl font-bold mb-4"></h1><div class="grid grid-cols-1 gap-4 ">');function Q(){const[r,n]=x(),l=w(),o=()=>l.query.list?.startsWith("conduit-"),e=l.query.list,c=b(),[u]=q();d(async()=>{if(!e||!o())return;await new Promise(a=>setTimeout(a,100));const s=c.store.playlists[e];n(s)});const m=L(()=>({queryKey:["playlist"],queryFn:async()=>(await fetch(u.instance.api_url+"/playlists/"+e)).json(),enabled:!!(u.instance.api_url&&!o()&&e)}));return d(()=>{m.data&&n(m.data)}),[t(T,{get children(){return S(()=>!!r())()?r().name:"Playlist"}}),t(y,{get when(){return r()},keyed:!0,children:s=>(()=>{var a=v(j),p=a.firstChild,h=p.nextSibling;return f(p,()=>r().name),f(h,t(y,{get when(){return s.relatedStreams.length>0},get children(){return t(P,{get each(){return s.relatedStreams.filter(i=>!c.store.blocklist[i?.uploaderUrl?.split("/").pop()])},children:(i,g)=>t($,{active:"",v:i,get index(){return g()+1},list:e})})}})),a})()})]}export{Q as default};
//# sourceMappingURL=playlist-nYaMn11r.js.map
