{"version":3,"sources":["../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_version.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/logger.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/models/messages/messages.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/models/messages/messageGenerator.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/WorkboxError.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/assert.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/models/quotaErrorCallbacks.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/registerQuotaErrorCallback.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/cacheNames.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/dontWaitFor.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/Deferred.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/getFriendlyURL.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/timeout.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/_private/waitUntil.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/copyResponse.js","../../../../node_modules/.pnpm/workbox-core@7.0.0/node_modules/workbox-core/clientsClaim.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/_version.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/createCacheKey.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/printCleanupDetails.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/printInstallDetails.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/_version.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/StrategyHandler.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/Strategy.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/PrecacheStrategy.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/PrecacheController.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/_version.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/utils/constants.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/utils/normalizeHandler.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/Route.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/RegExpRoute.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/Router.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/registerRoute.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/generateURLVariations.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/PrecacheRoute.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/addRoute.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/cleanupOutdatedCaches.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/precache.js","../../../../node_modules/.pnpm/workbox-precaching@7.0.0/node_modules/workbox-precaching/precacheAndRoute.js","../../../../node_modules/.pnpm/workbox-routing@7.0.0/node_modules/workbox-routing/NavigationRoute.js","../../../../node_modules/.pnpm/workbox-cacheable-response@7.0.0/node_modules/workbox-cacheable-response/_version.js","../../../../node_modules/.pnpm/workbox-cacheable-response@7.0.0/node_modules/workbox-cacheable-response/CacheableResponse.js","../../../../node_modules/.pnpm/workbox-cacheable-response@7.0.0/node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","../../../../node_modules/.pnpm/idb@7.1.1/node_modules/idb/build/wrap-idb-value.js","../../../../node_modules/.pnpm/idb@7.1.1/node_modules/idb/build/index.js","../../../../node_modules/.pnpm/workbox-expiration@7.0.0/node_modules/workbox-expiration/_version.js","../../../../node_modules/.pnpm/workbox-expiration@7.0.0/node_modules/workbox-expiration/models/CacheTimestampsModel.js","../../../../node_modules/.pnpm/workbox-expiration@7.0.0/node_modules/workbox-expiration/CacheExpiration.js","../../../../node_modules/.pnpm/workbox-expiration@7.0.0/node_modules/workbox-expiration/ExpirationPlugin.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/utils/messages.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/CacheFirst.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../../../../node_modules/.pnpm/workbox-strategies@7.0.0/node_modules/workbox-strategies/StaleWhileRevalidate.js","../../../../src/claims-sw.ts"],"names":["logger","inGroup","methodToColorMap","print","method","args","styles","logPrefix","api","loggerMethods","key","messages","paramName","validValueDescription","value","moduleName","className","funcName","expectedType","classNameStr","expectedClassName","isReturnValueProblem","expectedMethod","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","name","methodName","expectedClass","normalizedRangeHeader","size","start","end","url","error","message","status","cacheName","origin","type","generatorFunction","code","details","messageGenerator","WorkboxError","errorCode","isArray","hasMethod","object","isType","isInstance","isOneOf","validValues","isArrayOfClass","item","finalAssertExports","quotaErrorCallbacks","registerQuotaErrorCallback","callback","assert","_cacheNameDetails","_createCacheName","eachCacheNameDetail","fn","cacheNames","userCacheName","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","keysOptions","cacheKeys","cacheKey","strippedCacheKeyURL","supportStatus","canConstructResponseFromBodyStream","testResponse","dontWaitFor","promise","Deferred","resolve","reject","executeQuotaErrorCallbacks","getFriendlyURL","timeout","ms","waitUntil","event","asyncFn","returnPromise","copyResponse","response","modifier","clonedResponse","responseInit","modifiedResponseInit","body","clientsClaim","REVISION_SEARCH_PARAM","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","state","cachedResponse","PrecacheCacheKeyPlugin","precacheController","params","logGroup","groupTitle","deletedURLs","printCleanupDetails","deletionCount","_nestedGroup","urls","printInstallDetails","urlsToPrecache","urlsAlreadyPrecached","precachedCount","alreadyPrecachedCount","toRequest","input","StrategyHandler","strategy","options","plugin","possiblePreloadResponse","originalRequest","cb","err","pluginFilteredRequest","fetchResponse","responseClone","effectiveRequest","multiMatchOptions","vary","responseToCache","hasCacheUpdateCallback","oldResponse","mode","statefulParam","pluginsUsed","Strategy","responseDone","handler","handlerDone","waitUntilError","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","getOrCreatePrecacheController","defaultMethod","validMethods","normalizeHandler","Route","match","RegExpRoute","regExp","result","Router","responsePromise","payload","requestPromises","sameOrigin","route","debugMessages","msg","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","valueToCheck","wildcards","matchCallback","removeIgnoredSearchParams","ignoreURLParametersMatching","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNamesToDelete","cleanupOutdatedCaches","cachesDeleted","precache","precacheAndRoute","NavigationRoute","allowlist","denylist","pathnameAndSearch","CacheableResponse","config","cacheable","headerName","logFriendlyHeaders","CacheableResponsePlugin","instanceOfAny","constructors","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","getCursorAdvanceMethods","cursorRequestMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","success","wrap","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","target","prop","receiver","replaceTraps","wrapFunction","func","storeNames","unwrap","transformCachableValue","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","db","deleteDB","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","oldTraps","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","CacheTimestampsModel","objStore","timestamp","minTimestamp","maxCount","cursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","CacheExpiration","urlsExpired","expireOlderThan","ExpirationPlugin","isFresh","cacheExpiration","updateTimestampDone","dateHeaderTimestamp","now","dateHeader","headerTime","strategyName","CacheFirst","logs","log","cacheOkAndOpaquePlugin","StaleWhileRevalidate","p","fetchAndCachePromise","e","SWRHandlerWithFallback","_a","client"],"mappings":"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","file":"claims-sw.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} deletedURLs\n *\n * @private\n */\nconst logGroup = (groupTitle, deletedURLs) => {\n    logger.groupCollapsed(groupTitle);\n    for (const url of deletedURLs) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n};\n/**\n * @param {Array<string>} deletedURLs\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printCleanupDetails(deletedURLs) {\n    const deletionCount = deletedURLs.length;\n    if (deletionCount > 0) {\n        logger.groupCollapsed(`During precaching cleanup, ` +\n            `${deletionCount} cached ` +\n            `request${deletionCount === 1 ? ' was' : 's were'} deleted.`);\n        logGroup('Deleted Cache Requests', deletedURLs);\n        logger.groupEnd();\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport '../_version.js';\n/**\n * @param {string} groupTitle\n * @param {Array<string>} urls\n *\n * @private\n */\nfunction _nestedGroup(groupTitle, urls) {\n    if (urls.length === 0) {\n        return;\n    }\n    logger.groupCollapsed(groupTitle);\n    for (const url of urls) {\n        logger.log(url);\n    }\n    logger.groupEnd();\n}\n/**\n * @param {Array<string>} urlsToPrecache\n * @param {Array<string>} urlsAlreadyPrecached\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function printInstallDetails(urlsToPrecache, urlsAlreadyPrecached) {\n    const precachedCount = urlsToPrecache.length;\n    const alreadyPrecachedCount = urlsAlreadyPrecached.length;\n    if (precachedCount || alreadyPrecachedCount) {\n        let message = `Precaching ${precachedCount} file${precachedCount === 1 ? '' : 's'}.`;\n        if (alreadyPrecachedCount > 0) {\n            message +=\n                ` ${alreadyPrecachedCount} ` +\n                    `file${alreadyPrecachedCount === 1 ? ' is' : 's are'} already cached.`;\n        }\n        logger.groupCollapsed(message);\n        _nestedGroup(`View newly precached URLs.`, urlsToPrecache);\n        _nestedGroup(`View previously precached URLs.`, urlsAlreadyPrecached);\n        logger.groupEnd();\n    }\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","import { clientsClaim, skipWaiting } from \"workbox-core\";\nimport {\n  cleanupOutdatedCaches,\n  createHandlerBoundToURL,\n  precacheAndRoute,\n} from \"workbox-precaching\";\n// import { clientsClaim } from \"workbox-core\";\nimport { NavigationRoute, registerRoute } from \"workbox-routing\";\nimport { CacheableResponsePlugin } from \"workbox-cacheable-response\";\nimport { ExpirationPlugin } from \"workbox-expiration\";\nimport { CacheFirst, NetworkFirst, StaleWhileRevalidate } from \"workbox-strategies\";\n\ndeclare let self: ServiceWorkerGlobalScope;\n\nself.skipWaiting();\nclientsClaim();\n// clean old assets\ncleanupOutdatedCaches();\n\nconst PRECACHE_ROUTES = [\n  {\n    url: \"/\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/feed\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/trending\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/import\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/library\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/library/history\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/library/playlists\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/library/downloads\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/results\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/playlist\",\n    revision: Date.now().toString(),\n  },\n  {\n    url: \"/channel/*\",\n    revision: Date.now().toString(),\n  }\n]\ntry {\n  precacheAndRoute([\n    ...self.__WB_MANIFEST,\n    // ...PRECACHE_ROUTES,\n  ]);\n} catch (e) {\n  console.error(\"Error in precacheAndRoute:\", e);\n}\n\nconst SWRHandlerWithFallback = new StaleWhileRevalidate({\n  cacheName: \"dynamic-cache\",\n  plugins: [\n    new CacheableResponsePlugin({\n      statuses: [0, 200],\n    }),\n    new ExpirationPlugin({\n      maxEntries: 50,\n      maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days\n    }),\n  ],\n  fetchOptions: {\n    mode: \"cors\",\n  },\n});\n\nregisterRoute(\n  new NavigationRoute(SWRHandlerWithFallback, {\n    denylist: [/^\\/_/, new RegExp(\"/[^/?]+\\\\.[^/]+$\")],\n  })\n);\n\nregisterRoute(\n  /\\.(?:png|jpg|jpeg|svg|gif|com)$/,\n  new CacheFirst({\n    cacheName: \"image-cache\",\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [0, 200],\n      }),\n      new ExpirationPlugin({\n        maxEntries: 100,\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days\n      }),\n      {\n        cacheKeyWillBeUsed: async ({ request }) => {\n          return request.url;\n        },\n      },\n    ],\n  })\n);\n\n// Forward messages (and ports) from client to client.\nself.addEventListener(\"message\", async (event: ExtendableMessageEvent) => {\n  console.log(\"Received message in service worker:\", event.data); // Log the received data\n\n  if (event.data?.sharedService) {\n    console.log(\"Entering sharedService condition\");\n\n    const client = await self.clients.get(event.data.clientId);\n\n    if (client) {\n      console.log(\"Client found:\", client);\n      client.postMessage(event.data, event.ports);\n    } else {\n      console.error(\"Client not found for clientId:\", event.data.clientId); // Log if client is not found\n    }\n  } else {\n    console.warn(\"sharedService property not found in event data\"); // Warning if sharedService is not present in the message\n  }\n});\n// Tell clients their clientId. A service worker isn't actually needed\n// for a context to get its clientId, but this also doubles as a way\n// to verify that the service worker is active.\nself.addEventListener(\"fetch\", async (event: FetchEvent) => {\n  if (event.request.url === self.registration.scope + \"clientId\") {\n    return event.respondWith(\n      new Response(event.clientId, {\n        headers: { \"Content-Type\": \"text/plain\" },\n      })\n    );\n  }\n});\n"]}