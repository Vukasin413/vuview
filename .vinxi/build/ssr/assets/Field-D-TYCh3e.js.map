{"version":3,"file":"Field-D-TYCh3e.js","sources":["../../../../node_modules/.pnpm/@kobalte+core@0.11.2_solid-js@1.8.16/node_modules/@kobalte/core/dist/source/form-control/form-control-error-message.jsx","../../../../node_modules/.pnpm/@kobalte+core@0.11.2_solid-js@1.8.16/node_modules/@kobalte/core/dist/source/text-field/text-field-context.jsx","../../../../node_modules/.pnpm/@kobalte+core@0.11.2_solid-js@1.8.16/node_modules/@kobalte/core/dist/source/text-field/text-field-input.jsx","../../../../node_modules/.pnpm/@kobalte+core@0.11.2_solid-js@1.8.16/node_modules/@kobalte/core/dist/source/text-field/text-field-root.jsx","../../../../src/components/Field.tsx"],"sourcesContent":["import { mergeDefaultProps } from \"@kobalte/utils\";\nimport { createEffect, onCleanup, Show, splitProps } from \"solid-js\";\nimport { Polymorphic } from \"../polymorphic\";\nimport { useFormControlContext } from \"./form-control-context\";\n/**\n * The error message that gives the user information about how to fix a validation error on the form control.\n */\nexport function FormControlErrorMessage(props) {\n    const context = useFormControlContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"error-message\"),\n    }, props);\n    const [local, others] = splitProps(props, [\"forceMount\"]);\n    const isInvalid = () => context.validationState() === \"invalid\";\n    createEffect(() => {\n        if (!isInvalid()) {\n            return;\n        }\n        onCleanup(context.registerErrorMessage(others.id));\n    });\n    return (<Show when={local.forceMount || isInvalid()}>\n      <Polymorphic as=\"div\" {...context.dataset()} {...others}/>\n    </Show>);\n}\n","import { createContext, useContext } from \"solid-js\";\nexport const TextFieldContext = createContext();\nexport function useTextFieldContext() {\n    const context = useContext(TextFieldContext);\n    if (context === undefined) {\n        throw new Error(\"[kobalte]: `useTextFieldContext` must be used within a `TextField` component\");\n    }\n    return context;\n}\n","/*!\n * Portions of this file are based on code from react-spectrum.\n * Apache License Version 2.0, Copyright 2020 Adobe.\n *\n * Credits to the React Spectrum team:\n * https://github.com/adobe/react-spectrum/blob/0af91c08c745f4bb35b6ad4932ca17a0d85dd02c/packages/@react-aria/textfield/src/useTextField.ts\n */\nimport { composeEventHandlers, mergeDefaultProps } from \"@kobalte/utils\";\nimport { splitProps } from \"solid-js\";\nimport { createFormControlField, FORM_CONTROL_FIELD_PROP_NAMES, useFormControlContext, } from \"../form-control\";\nimport { Polymorphic } from \"../polymorphic\";\nimport { useTextFieldContext } from \"./text-field-context\";\n/**\n * The native html input of the textfield.\n */\nexport function TextFieldInput(props) {\n    return <TextFieldInputBase type=\"text\" {...props}/>;\n}\nexport function TextFieldInputBase(props) {\n    const formControlContext = useFormControlContext();\n    const context = useTextFieldContext();\n    props = mergeDefaultProps({\n        id: context.generateId(\"input\"),\n    }, props);\n    const [local, formControlFieldProps, others] = splitProps(props, [\"onInput\"], FORM_CONTROL_FIELD_PROP_NAMES);\n    const { fieldProps } = createFormControlField(formControlFieldProps);\n    return (<Polymorphic as=\"input\" id={fieldProps.id()} name={formControlContext.name()} value={context.value()} required={formControlContext.isRequired()} disabled={formControlContext.isDisabled()} readonly={formControlContext.isReadOnly()} aria-label={fieldProps.ariaLabel()} aria-labelledby={fieldProps.ariaLabelledBy()} aria-describedby={fieldProps.ariaDescribedBy()} aria-invalid={formControlContext.validationState() === \"invalid\" || undefined} aria-required={formControlContext.isRequired() || undefined} aria-disabled={formControlContext.isDisabled() || undefined} aria-readonly={formControlContext.isReadOnly() || undefined} onInput={composeEventHandlers([local.onInput, context.onInput])} {...formControlContext.dataset()} {...others}/>);\n}\n","import { access, createGenerateId, mergeDefaultProps, mergeRefs, } from \"@kobalte/utils\";\nimport { createUniqueId, splitProps } from \"solid-js\";\nimport { createFormControl, FORM_CONTROL_PROP_NAMES, FormControlContext } from \"../form-control\";\nimport { Polymorphic } from \"../polymorphic\";\nimport { createControllableSignal, createFormResetListener } from \"../primitives\";\nimport { TextFieldContext } from \"./text-field-context\";\n/**\n * A text input that allow users to input custom text entries with a keyboard.\n */\nexport function TextFieldRoot(props) {\n    let ref;\n    const defaultId = `textfield-${createUniqueId()}`;\n    props = mergeDefaultProps({ id: defaultId }, props);\n    const [local, formControlProps, others] = splitProps(props, [\"ref\", \"value\", \"defaultValue\", \"onChange\"], FORM_CONTROL_PROP_NAMES);\n    const [value, setValue] = createControllableSignal({\n        value: () => local.value,\n        defaultValue: () => local.defaultValue,\n        onChange: value => local.onChange?.(value),\n    });\n    const { formControlContext } = createFormControl(formControlProps);\n    createFormResetListener(() => ref, () => setValue(local.defaultValue ?? \"\"));\n    const onInput = e => {\n        if (formControlContext.isReadOnly() || formControlContext.isDisabled()) {\n            return;\n        }\n        const target = e.target;\n        setValue(target.value);\n        // Unlike in React, inputs `value` can be out of sync with our value state.\n        // even if an input is controlled (ex: `<input value=\"foo\" />`,\n        // typing on the input will change its internal `value`.\n        //\n        // To prevent this, we need to force the input `value` to be in sync with the text field value state.\n        target.value = value() ?? \"\";\n    };\n    const context = {\n        value,\n        generateId: createGenerateId(() => access(formControlProps.id)),\n        onInput,\n    };\n    return (<FormControlContext.Provider value={formControlContext}>\n      <TextFieldContext.Provider value={context}>\n        <Polymorphic as=\"div\" ref={mergeRefs(el => (ref = el), local.ref)} role=\"group\" id={access(formControlProps.id)} {...formControlContext.dataset()} {...others}/>\n      </TextFieldContext.Provider>\n    </FormControlContext.Provider>);\n}\n","import { JSX } from \"solid-js\";\nimport { TextField } from \"@kobalte/core\";\nimport { z } from \"zod\";\nexport default function Field(props: {\n  name?: string;\n  type?: JSX.HTMLAttributes<HTMLInputElement>[\"itemType\"];\n  value?: string;\n  onInput: (value: string) => void;\n  class?: string;\n  placeholder?: string;\n  validationState?: \"valid\" | \"invalid\" | undefined;\n  errorMessage?: string;\n}) {\n  return (\n    <TextField.Root\n      value={props.value}\n      onChange={props.onInput}\n      validationState={props.validationState}>\n      <TextField.Label class=\"text-text2 text-sm\">{props.name}</TextField.Label>\n      <TextField.Input\n        type={props.type}\n        placeholder={props.placeholder}\n        class={`bg-bg2 text-text1 outline-none focus-visible:ring-2 text-sm rounded-lg focus:ring-primary focus:border-primary block p-2.5 disabled:bg-bg2 disabled:cursor-not-allowed; ${props.class}`}\n      />\n      <TextField.ErrorMessage class=\"text-red-500 text-sm\">\n        {props.errorMessage}\n      </TextField.ErrorMessage>\n    </TextField.Root>\n  );\n}\n"],"names":["FormControlErrorMessage","props","context","useFormControlContext","mergeDefaultProps","id","generateId","local","others","splitProps","isInvalid","validationState","createEffect","onCleanup","registerErrorMessage","_$createComponent","Show","when","forceMount","children","Polymorphic","_$mergeProps","as","dataset","TextFieldContext","createContext","useTextFieldContext","useContext","undefined","Error","TextFieldInput","TextFieldInputBase","type","formControlContext","formControlFieldProps","FORM_CONTROL_FIELD_PROP_NAMES","fieldProps","createFormControlField","name","value","required","isRequired","disabled","isDisabled","readonly","isReadOnly","ariaLabel","ariaLabelledBy","ariaDescribedBy","onInput","composeEventHandlers","TextFieldRoot","ref","defaultId","createUniqueId","formControlProps","FORM_CONTROL_PROP_NAMES","setValue","createControllableSignal","defaultValue","onChange","createFormControl","createFormResetListener","e","target","createGenerateId","access","FormControlContext","Provider","role","Field","TextField","placeholder","class","errorMessage"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}