{"version":3,"file":"import.js","sources":["../../../src/components/Toggle.tsx","../../../src/routes/import.tsx?pick=default&pick=$css"],"sourcesContent":["\nexport default function Toggle({ label, onChange, checked }:{ label: string; onChange: () => void, checked: boolean }) {\n  return (\n    <label for={label} class=\"flex cursor-pointer items-center \">\n      <div class=\"relative focus-within:ring-4 rounded-full ring-primary p-1\">\n        <input checked={checked} onChange={onChange} type=\"checkbox\" id={label} class=\"peer sr-only\" />\n        <div class=\"peer-checked:ring-bg2 block h-8 w-14 rounded-full bg-bg1 ring-2 ring-bg3 focus:ring-4 focus:ring-primary peer-checked:bg-primary\"></div>\n        <div class=\"absolute left-2 top-2 h-6 w-6 rounded-full bg-bg3 shadow shadow-black/50 transition duration-200 peer-checked:translate-x-full peer-checked:bg-accent1\"></div>\n      </div>\n    </label>\n  );\n};\n","import { createSignal } from \"solid-js\";\nimport Toggle from \"~/components/Toggle\";\nimport { useSyncStore } from \"~/stores/syncStore\";\n\nexport default function Import() {\n  const [subscriptions, setSubscriptions] = createSignal<Record<string, {subscribedAt:number}>>({});\n  const [override, setOverride] = createSignal(false);\n  const selectedSubscriptions = () => Object.keys(subscriptions()).length;\n  const sync = useSyncStore();\n  sync.store.subscriptions\n  let fileSelector: HTMLInputElement | undefined = undefined;\n  function fileChange() {\n    console.log(\"fileChange\", fileSelector?.files?.[0]?.name);\n    if (!fileSelector?.files?.[0]) return;\n    const file = fileSelector.files[0];\n    file.text().then((text) => {\n\n      // Conduit\n      if (text.includes(\"Conduit\")) {\n        console.log(\"Conduit\");\n        const json = JSON.parse(text);\n        console.log(json);\n        setSubscriptions(json.subscriptions);\n        if (json.playlists) {\n          json.playlists.forEach((playlist: any) => {\n            sync.setStore(\"playlists\", playlist.id, playlist);\n            sync.setStore(\"playlists\", playlist.id, \"relatedStreams\", playlist.relatedStreams);\n          });\n        }\n      }\n      // Invidious\n      else if (text.indexOf(\"opml\") != -1) {\n        console.log(\"Invidious\");\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(text, \"text/xml\");\n        xmlDoc.querySelectorAll(\"outline[xmlUrl]\").forEach((item) => {\n          const url = item.getAttribute(\"xmlUrl\");\n          const id = url?.slice(-24);\n          if (id) {\n            setSubscriptions((subs)=>({...subs, [id]: {subscribedAt: Date.now()}}));\n          }\n        });\n      }\n      //LibreTube\n      else if (text.indexOf(\"localSubscriptions\") != -1) {\n        console.log(\"LibreTube\");\n        const json = JSON.parse(text);\n        json.localSubscriptions.forEach((item: any) => {\n          setSubscriptions((subs)=>({...subs, [item.channelId]: {subscribedAt: Date.now()}}));\n        });\n      }\n      // NewPipe\n      else if (text.indexOf(\"app_version\") != -1) {\n        console.log(\"NewPipe\");\n        const json = JSON.parse(text);\n        json.subscriptions\n          .filter((item: any) => item.service_id == 0)\n          .forEach((item: any) => {\n            const url = item.url;\n            const id = url.slice(-24);\n            setSubscriptions((subs)=>({...subs, [id]: {subscribedAt: Date.now()}}));\n          });\n      }\n      // Invidious JSON\n      else if (text.indexOf(\"thin_mode\") != -1) {\n        console.log(\"Invidious JSON\");\n        const json = JSON.parse(text);\n        json.subscriptions.forEach((id: string) => {\n          setSubscriptions((subs) => ({...subs, [id]: {subscribedAt: Date.now()}}));\n        });\n      }\n      // FreeTube DB\n      else if (text.indexOf(\"allChannels\") != -1) {\n        console.log(\"FreeTube DB\");\n        const json = JSON.parse(text);\n        json.subscriptions.forEach((item: any) => {\n          setSubscriptions((subs) => ({...subs, [item.id]: {subscribedAt: Date.now()}}));\n        });\n      }\n      //FreeTube JSON\n      else if (text.indexOf(\"subscriptions\") != -1) {\n        console.log(\"FreeTube JSON\");\n        const json = JSON.parse(text);\n        json.subscriptions.forEach((item: any) => {\n          setSubscriptions((subs) => ({...subs, [item.id]: {subscribedAt: Date.now()}}));\n        });\n      }\n      // Google Takeout JSON\n      else if (text.indexOf(\"contentDetails\") != -1) {\n        console.log(\"Google Takeout JSON\");\n        const json = JSON.parse(text);\n        json.forEach((item: any) => {\n          const id = item.snippet.resourceId.channelId;\n          setSubscriptions((subs) => ({...subs, [id]: {subscribedAt: Date.now()}}));\n        });\n      }\n\n      // Google Takeout CSV\n      else if (\n        file.name.length >= 5 &&\n        file.name.slice(-4).toLowerCase() == \".csv\"\n      ) {\n        console.log(\"Google Takeout CSV\");\n        const lines = text.split(\"\\n\");\n        for (let i = 1; i < lines.length; i++) {\n          const line = lines[i];\n          const id = line.slice(0, line.indexOf(\",\"));\n          if (id.length === 24)\n            setSubscriptions((subs) => ({...subs, [id]: {subscribedAt: Date.now()}}));\n        }\n      }\n    });\n  }\n  function handleImport(e: Event) {\n    e.preventDefault();\n    if (override()) {\n      Object.keys(sync.store.subscriptions).forEach((id) => {\n        sync.setStore(\"subscriptions\", id, undefined!);\n      });\n    }\n\n    console.log(\"subs\", subscriptions(), getLocalSubscriptions());\n\n    try {\n      sync.setStore(\"subscriptions\", subscriptions());\n    } catch (e) {\n      alert(\"Error saving subscriptions\");\n    }\n  }\n  function getLocalSubscriptions() {\n    try {\n      return sync.store.subscriptions;\n    } catch {\n      return [];\n    }\n  }\n  return (\n    <>\n      <div class=\"text-center\">\n        <form>\n          <div>\n            <input ref={fileSelector} type=\"file\" onInput={fileChange} />\n          </div>\n          <div>\n            <strong>\n              {`Selected Subscriptions: ${selectedSubscriptions()}`}{\" \"}\n            </strong>\n          </div>\n          <div class=\"flex items-center justify-center my-2 gap-2\" >\n              Override{\" \"}\n               <Toggle\n                label=\"Override\"\n                checked={override()}\n                onChange={() => setOverride(!override())}\n              /> \n          </div>\n          <div>\n            <button class=\"btn w-auto\" onClick={handleImport}>\n              Import\n            </button>\n          </div>\n        </form>\n        <br />\n        <strong>Importing Subscriptions from YouTube</strong>\n        <br />\n        <div>\n          Open\n          <a href=\"https://takeout.google.com/takeout/custom/youtube\">\n            takeout.google.com/takeout/custom/youtube\n          </a>\n          <br />\n          In \"Select data to include\", click on \"All YouTube data included\" and\n          select only \"subscriptions\".\n          <br />\n          Create the export and download the zip file.\n          <br />\n          Extract subscriptions.csv from the zip file.\n          <br />\n          Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from Invidious</strong>\n        <br />\n        <div>\n          Open\n          <a href=\"https://invidio.us/data_control\">invidiou.us/data_control</a>\n          <br />\n          Click on any of the export options.\n          <br />\n          Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from NewPipe</strong>\n        <br />\n        <div>\n          Go to the Feed tab.\n          <br />\n          Click on the arrow on where it says \"Subscriptions\".\n          <br />\n          Save the file somewhere.\n          <br />\n          Select and import the file above.\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["Toggle","label","onChange","checked","_$ssr","_tmpl$","_$ssrHydrationKey","_$ssrAttribute","_$escape","Import","subscriptions","setSubscriptions","createSignal","override","setOverride","selectedSubscriptions","Object","keys","length","sync","useSyncStore","store","_$createComponent"],"mappings":"8hCACA,SAAwBA,EAAO,CAAEC,MAAAA,EAAOC,SAAAA,EAAUC,QAAAA,CAAkE,EAAG,CACrHC,OAAAA,EAAAC,EAAAC,EAAAA,EAAAC,QAAAC,EACcP,EAAKM,EAAAA,EAAAA,EAAAA,EAAAA,YAEGJ,EAAO,EAAA,EAAAI,EAAAC,KAAAA,EAA0CP,EAAK,EAAA,EAAA,EAAA,CAAA,CAM9E,6mCCPA,SAAwBQ,GAAS,CAC/B,KAAM,CAACC,EAAeC,CAAgB,EAAIC,EAAoD,CAAE,CAAA,EAC1F,CAACC,EAAUC,CAAW,EAAIF,EAAa,EAAK,EAC5CG,EAAwBA,IAAMC,OAAOC,KAAKP,EAAAA,CAAe,EAAEQ,OAEjEC,OADaC,IACRC,MAAMX,cA+HXN,EAAAC,EAAAC,EAAA,+BASwCS,EAAsB,CAAE,CAAC,GAAAP,EAAAc,EAKnDtB,EAAM,CACNC,MAAK,WAAA,IACLE,SAAO,CAAA,OAAEU,EAAS,CAAC,EACnBX,SAAUA,IAAMY,EAAY,CAACD,GAAU,CAAC,CAAA,CAAA,CAAA,CAqDxD"}