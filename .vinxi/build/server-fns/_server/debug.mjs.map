{"version":3,"file":"debug.mjs","sources":["../../../../src/routes/debug.tsx?pick=default&pick=$css"],"sourcesContent":["import { createEffect, createSignal } from \"solid-js\";\nimport { isServer } from \"solid-js/web\";\nimport { toast } from \"~/components/Toast\";\nimport { useSyncStore } from \"~/stores/syncStore\";\nimport { createSharedServicePort, SharedService } from \"~/utils/SharedService\";\n\nexport default function Debug() {\n  const sync = useSyncStore();\n\n  const isWebWorkerSupported = () => {\n    if (isServer) return false;\n    return typeof Worker !== \"undefined\";\n  }\n\n  const isOPFSSupported = async () => {\n    if (isServer) return false;\n    try {\n      await navigator.storage.getDirectory();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  const isWebRTCSupported = async () => {\n    if (isServer) return false;\n    try {\n      await navigator.mediaDevices.getUserMedia({ audio: true });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  const isServiceWorkerSupported = () => {\n    if (isServer) return false;\n    return typeof navigator.serviceWorker !== \"undefined\";\n  }\n  const isServiceWorkerEnabled =async () => {\n    if (isServer) return false;\n    return await fetch(\"/clientId\").then((res) => res.ok);\n  }\n\n  const isLocksSupported = () => {\n    if (isServer) return false;\n    return typeof navigator.locks !== \"undefined\";\n  }\n  const isPersistentStorageSupported = () => {\n    if (isServer) return false;\n    return typeof navigator.storage.persist !== \"undefined\";\n  }\n  const isPersistentStorageEnabled = async () => {\n    if (isServer) return false;\n    return await navigator.storage.persisted();\n  }\n\n  const enablePersistentStorage = async () => {\n    if (isServer) return false;\n    await navigator.storage.persist().then((granted) => {\n      if (granted) {\n        toast.success(\"Persistent storage enabled\");\n        setPersistentStorageEnabled(true);\n      } else {\n        toast.error(\"Persistent storage not enabled\");\n      }\n    });\n  }\n\n  const isMessageChannelSupported = () => {\n    if (isServer) return false;\n    return typeof MessageChannel !== \"undefined\";\n  }\n\n  const isBroadcastChannelSupported = () => {\n    if (isServer) return false;\n    return typeof BroadcastChannel !== \"undefined\";\n  }\n\n  const isCreateSyncAccessHandleEnabled = async () => {\n    if (isServer) return false;\n    const workerScript = `\n    self.onmessage = async () => {\n    console.log(\"worker\");\n    try {\n    console.log(\"trying to get directory\");\n    const handle = await navigator.storage.getDirectory();\n    const file = await handle.getFileHandle(\"test.txt\", { create: true });\n    console.log(\"got file\");\n    const accessHandle = await file.createSyncAccessHandle();\n    console.log(\"got access handle\");\n    accessHandle.write(new TextEncoder().encode(\"test\"));\n    accessHandle.flush();\n    accessHandle.close();\n    console.log(\"wrote to file\");\n    self.postMessage(true);\n    } catch (e) {\n      console.error(\"Error while creating sync access handle\", e);\n      self.postMessage(false);\n    }\n    }\n    `;\n    const worker = new Worker(URL.createObjectURL(new Blob([workerScript])));\n    return new Promise<boolean>((resolve) => {\n      worker.onmessage = (e) => {\n        resolve(e.data);\n      };\n      worker.postMessage(\"\");\n    }\n    );\n\n  }\n  const isSharedServiceWorking = async () => {\n    if (isServer) return false;\n    const workerScript = `\n    self.onmessage = async () => {\n        self.postMessage(true);\n    }\n    `;\n    const worker = new Worker(URL.createObjectURL(new Blob([workerScript])));\n\n    const sharedService = new SharedService(\"test\", () => {\n      return createSharedServicePort({\n        read: async () => {\n          console.log(\"Calling read\");\n          return new Promise((resolve, reject) => {\n\n            const messageHandler = (event: MessageEvent) => {\n              resolve(event.data);\n              worker?.removeEventListener(\"message\", messageHandler);\n            };\n\n            const errorHandler = (error: Event) => {\n              if (error instanceof ErrorEvent) {\n                reject(error);\n              }\n              worker?.removeEventListener(\"error\", errorHandler);\n            };\n            worker.onerror = errorHandler;\n            worker.onmessage = messageHandler;\n\n            worker.postMessage(\"\");\n          });\n        }\n      });\n    });\n\n    return new Promise<boolean>(async (resolve) => {\n    try {\n    await sharedService.activate(async () => {\n      const res = await sharedService?.proxy[\"read\"]();\n      console.log(\"res\", res);\n      resolve(res === true);\n    });\n    } catch (e) {\n      console.error(\"Error connecting to shared service\", e);\n      resolve(false);\n    }\n    });\n\n  }\n\n\n\n\n\n\n  const [opfsSupported, setOPFSSupported] = createSignal(false);\n  const [webRTCSupported, setWebRTCSupported] = createSignal(false);\n  const [serviceWorkerEnabled, setServiceWorkerEnabled] = createSignal(false);\n  const [persistentStorageEnabled, setPersistentStorageEnabled] = createSignal(false);\n  const [webWorkerSupported, setWebWorkerSupported] = createSignal(false);\n  const [locksSupported, setLocksSupported] = createSignal(false);\n  const [persistentStorageSupported, setPersistentStorageSupported] = createSignal(false);\n  const [serviceWorkerSupported, setServiceWorkerSupported] = createSignal(false);\n  const [createSyncAccessHandleEnabled, setCreateSyncAccessHandleEnabled] = createSignal(false);\n  const [messageChannelSupported, setMessageChannelSupported] = createSignal(false);\n  const [broadcastChannelSupported, setBroadcastChannelSupported] = createSignal(false);\n  const [sharedServiceWorking, setSharedServiceWorking] = createSignal(false);\n\n\n  createEffect(async () => {\n    setOPFSSupported(await isOPFSSupported());\n    setWebRTCSupported(await isWebRTCSupported());\n    setServiceWorkerEnabled(await isServiceWorkerEnabled());\n    setPersistentStorageEnabled(await isPersistentStorageEnabled());\n    setWebWorkerSupported(isWebWorkerSupported());\n    setLocksSupported(isLocksSupported());\n    setPersistentStorageSupported(isPersistentStorageSupported());\n    setServiceWorkerSupported(isServiceWorkerSupported());\n    setCreateSyncAccessHandleEnabled(await isCreateSyncAccessHandleEnabled());\n    setMessageChannelSupported(isMessageChannelSupported());\n    setBroadcastChannelSupported(isBroadcastChannelSupported());\n    setSharedServiceWorking(await isSharedServiceWorking());\n\n  });\n\n\n\n  return (\n    <div class=\"p-4\">   \n      <h1 class=\"text-2xl font-bold\">Debug</h1>\n      <div class=\"flex flex-col space-y-2\">\n        <div class=\"flex flex-col space-y-1\">\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Web Worker</div>\n            <div>{webWorkerSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">OPFS</div>\n            <div>{opfsSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">WebRTC</div>\n            <div>{webRTCSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Service Worker</div>\n            <div>{serviceWorkerSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Service Worker Enabled</div>\n            <div>{serviceWorkerEnabled() ? \"Enabled\" : \"Not enabled\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Locks</div>\n            <div>{locksSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Persistent Storage</div>\n            <div>{persistentStorageSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Persistent Storage Enabled</div>\n            <div>{persistentStorageEnabled() ? \"Enabled\" : \"Not enabled\"}</div>\n            <span class=\"cursor-pointer underline text-primary\" onClick={enablePersistentStorage}>Enable</span>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Create Sync Access Handle</div>\n            <div>{createSyncAccessHandleEnabled() ? \"Enabled\" : \"Not enabled\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Message Channel</div>\n            <div>{messageChannelSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Broadcast Channel</div>\n            <div>{broadcastChannelSupported() ? \"Supported\" : \"Not supported\"}</div>\n          </div>\n          <div class=\"flex flex-row justify-between\">\n            <div class=\"font-bold\">Shared Service</div>\n            <div>{sharedServiceWorking() ? \"Working\" : \"Not working\"}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"names":["Debug","useSyncStore","isWebWorkerSupported","isServer","Worker","isOPFSSupported","navigator","storage","getDirectory","isWebRTCSupported","mediaDevices","getUserMedia","audio","isServiceWorkerSupported","serviceWorker","isServiceWorkerEnabled","fetch","then","res","ok","isLocksSupported","locks","isPersistentStorageSupported","persist","isPersistentStorageEnabled","persisted","isMessageChannelSupported","MessageChannel","isBroadcastChannelSupported","BroadcastChannel","isCreateSyncAccessHandleEnabled","workerScript","worker","URL","createObjectURL","Blob","Promise","resolve","onmessage","e","data","postMessage","isSharedServiceWorking","sharedService","SharedService","createSharedServicePort","read","console","log","reject","messageHandler","event","removeEventListener","errorHandler","error","ErrorEvent","onerror","activate","proxy","opfsSupported","setOPFSSupported","createSignal","webRTCSupported","setWebRTCSupported","serviceWorkerEnabled","setServiceWorkerEnabled","persistentStorageEnabled","setPersistentStorageEnabled","webWorkerSupported","setWebWorkerSupported","locksSupported","setLocksSupported","persistentStorageSupported","setPersistentStorageSupported","serviceWorkerSupported","setServiceWorkerSupported","createSyncAccessHandleEnabled","setCreateSyncAccessHandleEnabled","messageChannelSupported","setMessageChannelSupported","broadcastChannelSupported","setBroadcastChannelSupported","sharedServiceWorking","setSharedServiceWorking","createEffect","_$ssr","_tmpl$","_$ssrHydrationKey"],"mappings":"+4DAMA,SAAwBA,IAAQ,CACjBC,EAAa,EAE1B,MAAMC,EAAuBA,IACvBC,EAAiB,GACd,OAAOC,OAAW,IAGrBC,EAAkB,SAAY,CAC9BF,GAAAA,EAAiB,MAAA,GACjB,GAAA,CACIG,aAAAA,UAAUC,QAAQC,eACjB,QACG,CACH,MAAA,EACT,CAAA,EAEIC,EAAoB,SAAY,CAChCN,GAAAA,EAAiB,MAAA,GACjB,GAAA,CACIG,aAAAA,UAAUI,aAAaC,aAAa,CAAEC,MAAO,EAAA,CAAM,EAClD,QACG,CACH,MAAA,EACT,CAAA,EAGIC,EAA2BA,IAC3BV,EAAiB,GACd,OAAOG,UAAUQ,cAAkB,IAEtCC,EAAwB,SACxBZ,EAAiB,GACd,MAAMa,MAAM,WAAW,EAAEC,KAAMC,GAAQA,EAAIC,EAAE,EAGhDC,EAAmBA,IACnBjB,EAAiB,GACd,OAAOG,UAAUe,MAAU,IAE9BC,EAA+BA,IAC/BnB,EAAiB,GACd,OAAOG,UAAUC,QAAQgB,QAAY,IAExCC,EAA6B,SAC7BrB,EAAiB,GACd,MAAMG,UAAUC,QAAQkB,YAe3BC,EAA4BA,IAC5BvB,EAAiB,GACd,OAAOwB,eAAmB,IAG7BC,EAA8BA,IAC9BzB,EAAiB,GACd,OAAO0B,iBAAqB,IAG/BC,EAAkC,SAAY,CAC9C3B,GAAAA,EAAiB,MAAA,GACrB,MAAM4B,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBhBC,EAAS,IAAI5B,OAAO6B,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,CAAY,CAAC,CAAC,CAAC,EAChE,OAAA,IAAIK,QAA8BC,GAAA,CACvCL,EAAOM,UAAmBC,GAAA,CACxBF,EAAQE,EAAEC,IAAI,CAAA,EAEhBR,EAAOS,YAAY,EAAE,CAAA,CAEvB,CAAA,EAGIC,EAAyB,SAAY,CACrCvC,GAAAA,EAAiB,MAAA,GACrB,MAAM4B,EAAgB;AAAA;AAAA;AAAA;AAAA,MAKhBC,EAAS,IAAI5B,OAAO6B,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,CAAY,CAAC,CAAC,CAAC,EAEjEY,EAAgB,IAAIC,EAAc,OAAQ,IACvCC,EAAwB,CAC7BC,KAAM,UACJC,QAAQC,IAAI,cAAc,EACnB,IAAIZ,QAAQ,CAACC,EAASY,IAAW,CAEhCC,MAAAA,EAAkBC,GAAwB,CAC9Cd,EAAQc,EAAMX,IAAI,EACVY,GAAAA,oBAAoB,UAAWF,CAAc,CAAA,EAGjDG,EAAgBC,GAAiB,CACjCA,aAAiBC,YACnBN,EAAOK,CAAK,EAENF,GAAAA,oBAAoB,QAASC,CAAY,CAAA,EAEnDrB,EAAOwB,QAAUH,EACjBrB,EAAOM,UAAYY,EAEnBlB,EAAOS,YAAY,EAAE,CAAA,CACtB,EACH,CACD,CACF,EAEM,OAAA,IAAIL,QAAiB,MAAOC,GAAY,CAC3C,GAAA,CACEM,MAAAA,EAAcc,SAAS,SAAY,CACvC,MAAMvC,EAAM,MAAMyB,GAAee,MAAM,KAAQ,EACvCV,QAAAA,IAAI,MAAO9B,CAAG,EACtBmB,EAAQnB,IAAQ,EAAI,CAAA,CACrB,QACQqB,EAAG,CACFe,QAAAA,MAAM,qCAAsCf,CAAC,EACrDF,EAAQ,EAAK,CACf,CAAA,CACC,CAAA,EASG,CAACsB,EAAeC,CAAgB,EAAIC,EAAa,EAAK,EACtD,CAACC,EAAiBC,CAAkB,EAAIF,EAAa,EAAK,EAC1D,CAACG,EAAsBC,CAAuB,EAAIJ,EAAa,EAAK,EACpE,CAACK,EAA0BC,CAA2B,EAAIN,EAAa,EAAK,EAC5E,CAACO,EAAoBC,CAAqB,EAAIR,EAAa,EAAK,EAChE,CAACS,EAAgBC,CAAiB,EAAIV,EAAa,EAAK,EACxD,CAACW,EAA4BC,CAA6B,EAAIZ,EAAa,EAAK,EAChF,CAACa,EAAwBC,CAAyB,EAAId,EAAa,EAAK,EACxE,CAACe,EAA+BC,CAAgC,EAAIhB,EAAa,EAAK,EACtF,CAACiB,EAAyBC,CAA0B,EAAIlB,EAAa,EAAK,EAC1E,CAACmB,EAA2BC,CAA4B,EAAIpB,EAAa,EAAK,EAC9E,CAACqB,EAAsBC,CAAuB,EAAItB,EAAa,EAAK,EAG1EuB,OAAAA,EAAa,SAAY,CACNxB,EAAA,MAAMvD,GAAiB,EACrB0D,EAAA,MAAMtD,GAAmB,EACpBwD,EAAA,MAAMlD,GAAwB,EAC1BoD,EAAA,MAAM3C,GAA4B,EAC9D6C,EAAsBnE,GAAsB,EAC5CqE,EAAkBnD,GAAkB,EACpCqD,EAA8BnD,GAA8B,EAC5DqD,EAA0B9D,GAA0B,EACnBgE,EAAA,MAAM/C,GAAiC,EACxEiD,EAA2BrD,GAA2B,EACtDuD,EAA6BrD,GAA6B,EAClCuD,EAAA,MAAMzC,GAAwB,CAAA,CAEvD,EAID2C,EAAAC,EAAAC,EAOgBnB,EAAAA,IAAuB,YAAc,gBAIrCT,IAAkB,YAAc,gBAIhCG,EAAgB,EAAI,YAAc,gBAIlCY,EAAuB,EAAI,YAAc,gBAIzCV,IAAyB,UAAY,cAIrCM,IAAmB,YAAc,gBAIjCE,EAA2B,EAAI,YAAc,gBAI7CN,IAA6B,UAAY,cAKzCU,EAAkC,EAAA,UAAY,cAI9CE,EAAwB,EAAI,YAAc,gBAI1CE,IAA8B,YAAc,gBAI5CE,EAAyB,EAAA,UAAY,aAAa,CAMpE"}